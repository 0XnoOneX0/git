{
  "openapi": "3.0.2",
  "info": {
    "description": "Moov is a platform that enables developers to integrate all aspects of money movement with ease and speed. The Moov API makes it simple for platforms to send, receive, and store money. Our API is based upon REST principles, returns JSON responses, and uses standard HTTP response codes.\n",
    "title": "Moov API"
  },
  "servers": [
    {
      "url": "https://api.moov.io",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "API authentication",
      "description": "For server-to-server communication, use your API key's public key and secret key with Basic authentication.\n\nSet the Authorization header to `Basic <credentials>` where credentials is the Base64 encoding of public key and private key joined by a single colon `:`.\n"
    },
    {
      "name": "Access token",
      "description": "When making requests to Moov from a browser, you can use OAuth with JSON Web Tokens (JWT).\n\nOur authentication flow follows the OAuth 2.0 standard. With this endpoint, you'll create an access token that you will pass along with API requests or when initializing Moov.js.\n"
    },
    {
      "name": "Accounts",
      "description": "Accounts represent a legal entity (either a business or an individual) in Moov. You can create an account for yourself or set up accounts for others. You can retrieve an account to get details on the business or individual account holder, such as an email address or employer identification number (EIN). You can also look at the account object to see what capabilities that account has.\n"
    },
    {
      "name": "Analytics",
      "description": "You can retrieve helpful at-a-glance information about your account by getting metrics on categories such as new accounts, transfer counts, and transfer volume over different time periods. To use this endpoint, you must specify the `/analytics.read` scope.\n"
    },
    {
      "name": "Avatars",
      "description": "You can retrieve an account's profile image. This is especially useful if you'd like to use the profile image for a corresponding account in your own product.\n"
    },
    {
      "name": "Bank accounts",
      "description": "To transfer money with Moov, you’ll need to link a bank account to your Moov account, then verify that account. You can link a bank account to a Moov account by adding the bank account number and routing number to the account object. We require micro-deposit verification to reduce the risk of fraud or unauthorized activity. You can verify a bank account by initiating micro-deposits, sending two small credit transfers to the bank account you want to confirm.\nAlternatively, you can link and verify a bank account in one step through an instant account verification token from a third party provider like Plaid. Bank accounts can have the following statuses: `new`,`pending`,`verified`,`verificationFailed`,`errored`.\n"
    },
    {
      "name": "Capabilities",
      "description": "Capabilities determine what a Moov account can do. Each capability has specific information requirements, depending on risk and compliance standards associated with different account activities. For example, there are more information requirements for a business that wants to charge other accounts than for an individual who simply wants to receive funds. When you request a capability, we list the information requirements for that capability. Once you submit the required information, we need to verify the data. Because of this, a requested capability may not immediately become active. For more detailed information on Capabilities and Capability ID's please refer to Moov's <a href=\"https://docs.moov.io/guides/accounts/capabilities/\" target=\"_blank\">Guides</a> on Capabilities.\n"
    },
    {
      "name": "Card issuing",
      "description": "You can issue virtual cards with Moov that can be used for payments once they've been created."
    },
    {
      "name": "Cards",
      "description": "You can link credit or debit cards to Moov accounts. You can use a card as a source for making transfers, which charges the card. To link a card to a Moov account and avoid some of the burden of PCI compliance, use the [card link Moov Drop](https://docs.moov.io/moovjs/drops/card-link)."
    },
    {
      "name": "Enriched address",
      "description": "Search for valid addresses using a partial or full address.\n"
    },
    {
      "name": "Enriched profile",
      "description": "By supplying an email address, you can retrieve a profile with enriched data fields.\n"
    },
    {
      "name": "Industries",
      "description": "Information about industries and their merchant codes.\n"
    },
    {
      "name": "Institutions",
      "description": "Lookup ACH and wire participating financial institutions. We recommend using this endpoint when an end-user enters a routing number to confirm their bank or credit union.\n"
    },
    {
      "name": "Money movement",
      "description": "Transfer allow you Moov money\n"
    },
    {
      "name": "Payment methods",
      "description": "Payments methods represent all of the ways an account can move funds to another Moov account. Payment methods are generated programmatically when a card or bank account is added or the status is updated e.g., `ach-debit-fund` will be added as a payment method once the bank account is verified.\n\n<em>RTP® is not yet generally available on Moov. Contact us for more information.</em>\n"
    },
    {
      "name": "Representatives",
      "description": "We think of a representative as an individual who can take major actions on behalf of a business. A representative can be the business owner, or anyone who owns 25% or more of the business. Some examples of representatives are the CEO, CFO, COO, or president. We require all business accounts to have valid information for at least one representative.\n"
    },
    {
      "name": "Transactions",
      "description": "A transaction is a record of a card's activity on a particular Moov account.\n"
    },
    {
      "name": "Transfers",
      "description": "A transfer is the movement of money between Moov accounts, from source to destination. Provided you have linked a bank account which has been verified, you can initiate a transfer to another Moov account. All you need to do is note a [paymentMethod](#tag/Payment-methods), the $ amount of the transfer, and a brief description.\n"
    },
    {
      "name": "Wallets",
      "description": "A Moov wallet can serve as a funding source as you accumulate funds. You can also use the Moov wallet to:\n - Pre-fund transfers for faster payouts\n - Transfer funds between Moov wallets for instantly available funds\n\n <em> If you've requested the `send-funds` or `collect-funds` capability, the `wallet` capability will be automatically requested as well. Read more on the [data requirements for wallets here](https://docs.moov.io/guides/accounts/capabilities/#wallet).</em>\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Authentication",
      "tags": [
        "API authentication",
        "Access token",
        "Ping"
      ]
    },
    {
      "name": "Moov accounts",
      "description": "The Moov account represents an legal entity. It can be either a company or an individual person. Users (which represent a single human) can be assigned to a Moov account.\n",
      "tags": [
        "Accounts",
        "Representatives",
        "Capabilities"
      ]
    },
    {
      "name": "Sources",
      "description": "Information about how to add external connections you can use to top off your Moov balance or payout the balance of your Moov account.\n",
      "tags": [
        "Bank accounts",
        "Cards",
        "Card issuing",
        "Transactions",
        "Payment methods"
      ]
    },
    {
      "name": "Money movement",
      "description": "How we move money via Moov.\n",
      "tags": [
        "Transfers"
      ]
    },
    {
      "name": "Wallets",
      "description": "Everything related to holding money.\n",
      "tags": [
        "Wallets"
      ]
    },
    {
      "name": "Analytics",
      "description": "You can retrieve helpful at-a-glance information about your account by getting metrics on categories such as new accounts, transfer counts, and transfer volume over different time periods. To use this endpoint, you must specify the `/analytics.read` scope.\n",
      "tags": [
        "Analytics"
      ]
    },
    {
      "name": "Institution lookup",
      "description": "Look up financial institutions by routing number.",
      "tags": [
        "Institutions"
      ]
    },
    {
      "name": "Enrichment",
      "description": "Fetch additional information about a specific account.",
      "tags": [
        "Avatars",
        "Enriched address",
        "Enriched profile",
        "Industries"
      ]
    }
  ],
  "paths": {
    "/oauth2/token": {
      "post": {
        "operationId": "CreateOAuth2Token",
        "summary": "Create access token",
        "description": "Use the client_id and client_secret to generate an access token.",
        "tags": [
          "Access token"
        ],
        "security": [
          {
            "OAuth2Credentials": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCredentialsGrantToAccessTokenRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ClientCredentialsGrantToAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully exchanged the code to create a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Failure create token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenErrorResponse"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/oauth2/revoke": {
      "post": {
        "operationId": "RevokeOAuth2Token",
        "summary": "Revoke access token",
        "description": "Allows clients to notify the authorization server that a previously obtained refresh or access token is no longer needed",
        "tags": [
          "Access token"
        ],
        "security": [
          {
            "OAuth2Credentials": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RevokeTokenRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "description": "Failed to revoke token"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "summary": "List accounts",
        "operationId": "listAccounts",
        "description": "List or search accounts to which the caller is connected.<br><br>\nAll supported query parameters are optional. If none are provided\nthe response will include all connected accounts. Pagination is\nsupported via the `skip` and `count` query parameters. \n<br><br> To list connected accounts, you must specify the `/accounts.read` scope.\n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter connected accounts by name.<br><br>\nIf provided, this query will attempt to find matches (including partial) against the following Account and Profile fields:\n<ul>\n  <li>Account `displayName`</li>\n  <li>Individual Profile `firstName`, `middleName`, `lastName`, and `suffix`</li>\n  <li>Individual Profile name suffix</li>\n  <li>Business Profile `legalBusinessName`, and `doingBusinessAs`</li>\n</ul>\n",
            "example": "frank",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter connected accounts by email address.<br><br>\nIt is not necessary to provided the full email address as partial matches will also be returned.\n",
            "example": "someone@moov.io",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter connected accounts by AccountType.<br><br>\nIf the `type` parameter is used in combination with `name`, only the corresponding type's name fields will be searched.\nFor example, if `type=business` and `name=moov`, the search will attempt to find matches against the display name and Business Profile name fields (`legalBusinessName`, and `doingBusinessAs`).\n",
            "example": "business",
            "schema": {
              "$ref": "#/components/schemas/AccountType"
            }
          },
          {
            "name": "foreignID",
            "in": "query",
            "description": "Serves as an optional alias from a foreign/external system which can be used to reference this resource\n",
            "example": "4528aba-b9a1-11eb-8529-0242ac13003",
            "schema": {
              "$ref": "#/components/schemas/ForeignID"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional parameter to limit the number of results in the query",
            "example": 10,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to offset before starting to collect the result set",
            "example": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All connected accounts matching the filter parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "post": {
        "summary": "Create account",
        "operationId": "createAccount",
        "description": "You can create accounts for your users by passing the required information to Moov. <br><br> Note that `mode` field is only required when creating a facilitator account. All non-facilitator account creation requests will ignore the mode field provided and be set to the calling facilitator's mode. <br><br> If you are creating an account with the business type \"llc\", \"partnership\", or \"privateCorporation\", you will need to also provide [business representatives](https://docs.moov.io/api/#tag/Representatives) after creating the account for verification purposes. Once you've added your business owners as representatives, you'll then need to [patch your Moov account](https://docs.moov.io/api/#operation/patchAccount) to indicate that ownership information is complete. Read more on our [business verification requirements here](https://docs.moov.io/guides/accounts/business-verification/). <br><br> When creating an account, you will need to specify the `/accounts.write` scope.",
        "tags": [
          "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account created"
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}": {
      "get": {
        "summary": "Get account",
        "operationId": "getAccount",
        "description": "Retrieves details for the account with the specified ID. <br><br> To get an account, you will need to specify the `/accounts/{accountID}/profile.read` scope.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "The created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "put": {
        "summary": "Update account",
        "deprecated": true,
        "operationId": "updateAccount",
        "description": "The `PUT` endpoint for updating an account will be removed April 2022. Please use the `PATCH` endpoint for updating an account.  The same request payload can be used. If an account's details have changed, you can update the information associated with a specific account ID. To update an account, you need to specify the `/accounts/{accountID}/profile.write` scope. <br><br> When using this endpoint, you must provide the full account object.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "patch": {
        "summary": "Patch account",
        "operationId": "patchAccount",
        "description": "If an account's details have changed, you can patch the information associated with a specific account ID. <br><br> To patch an account, you must specify the `/accounts/{accountID}/profile.write` scope and provide the changed information. <br><br> <b>Note:</b> Most of the information in a Moov account profile can't be changed once an account has been verified or if a verification is still pending. If you need to update information in a locked state, please reach out to Moov support so we can update and verify the new information.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The patched account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "The request body was invalid"
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "409": {
            "description": "Account fields locked due to verification status or account type cannot be changed"
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/tos-token": {
      "get": {
        "summary": "Get terms of service token",
        "operationId": "getTermsOfServiceToken",
        "description": "Generates a token that can then be used to accept Moov's Terms of Service. Must be called from a web browser.",
        "tags": [
          "Accounts"
        ],
        "responses": {
          "200": {
            "description": "The newly generated Terms of Service token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermsOfServiceToken"
                }
              }
            }
          },
          "422": {
            "description": "Required request headers were missing or contained unprocessable data"
          }
        }
      }
    },
    "/accounts/{accountID}/countries": {
      "get": {
        "summary": "Get Account Countries",
        "operationId": "getAccountCountries",
        "description": "Retrieve the specified countries of operation for an account. <br><br> To get the list of countries, you'll need to specify the `/accounts/{accountID}/profile.read` scope.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "The Requested Countries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "put": {
        "summary": "Assign Account Countries",
        "operationId": "assignAccountCountries",
        "description": "Assign the countries of operation for an account. This endpoint will always overwrite the previously assigned values. <br><br> To update the account countries, you'll need to specify the `/accounts/{accountID}/profile.write` scope.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Countries"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries"
                }
              }
            },
            "description": "countries assigned to account"
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/representatives": {
      "post": {
        "summary": "Create representative",
        "operationId": "createRepresentative",
        "description": "Moov accounts associated with businesses require information regarding individuals who represent the business. You can provide this information by creating a representative.<br><br> To create a representative, you must specify the `/accounts/{accountID}/representatives.write` scope.",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRepresentative"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Representative"
                }
              }
            },
            "description": "representative created"
          },
          "404": {
            "description": "The specified Account or Representative was not found"
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List representatives",
        "operationId": "listRepresentatives",
        "description": "A Moov account may have multiple representatives depending on the associated business's ownership and management structure. You can use this method to list all the representatives for a given Moov account. Note that Moov accounts associated with an individual do not have representatives. <br><br> To list representatives, you need to specify the `/accounts/{accountID}/representatives.read` scope.",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved representatives",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Representative"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/representatives/{representativeID}": {
      "get": {
        "summary": "Get representative",
        "operationId": "getRepresentative",
        "description": "Retrieve a specific representative associated with a given Moov account. <br><br> To get a representative, you'll need to specify the `/accounts/{accountID}/representatives.read` scope.",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/RepresentativeID"
          }
        ],
        "responses": {
          "200": {
            "description": "The Representative",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Representative"
                }
              }
            }
          },
          "404": {
            "description": "No Representative with the specified representativeID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "summary": "Delete a representative",
        "operationId": "deleteRepresentative",
        "description": "Deletes a business representative associated with a Moov account. <br><br> To use this endpoint, you'll need to specify the `/accounts/{accountID}/representatives.write` scope.",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/RepresentativeID"
          }
        ],
        "responses": {
          "204": {
            "description": "Representative deleted"
          },
          "404": {
            "description": "The specified Account or Representative was not found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "put": {
        "summary": "Update representative",
        "deprecated": true,
        "operationId": "updateRepresentative",
        "description": "The `PUT` endpoint for updating a representative will be removed April 2022. Please use the `PATCH` endpoint for updating a representative. The same request payload can be used. If a representative's information has changed and you need to update it, you can use this method to change any of the fields associated with that particular representative. <br><br> To update a representative, you'll need to specify the `/accounts/{accountID}/representatives.write` scope.",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/RepresentativeID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRepresentative"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Representative"
                }
              }
            },
            "description": "representative updated"
          },
          "404": {
            "description": "The specified account or representative was not found"
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "patch": {
        "summary": "Patch representative",
        "operationId": "patchRepresentative",
        "description": "If a representative's information has changed you can patch the information associated with a specific representative ID. <br><br> To patch a representative, you'll need to specify the `/accounts/{accountID}/representatives.write` scope and provide the changed information. <br><br> <b>Note:</b> Most of the information in a Moov account profile can't be changed once an account has been verified or if a verification is still pending. If you need to update information in a locked state, please reach out to Moov support so we can update and verify the new information.",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/RepresentativeID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRepresentativeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Representative"
                }
              }
            },
            "description": "representative patched"
          },
          "404": {
            "description": "The specified account or representative was not found"
          },
          "409": {
            "description": "Representative fields locked due to verification status"
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/wallets": {
      "get": {
        "summary": "List wallets",
        "description": "List the wallets associated with a Moov account. <br><br> To list wallets, you'll need to specify the `/accounts/{accountID}/wallets.read` scope.",
        "operationId": "listWalletsForAccount",
        "tags": [
          "Wallets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallets associated with the given account",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Wallet"
                  },
                  "maxItems": 10,
                  "type": "array"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/wallets/{walletID}": {
      "get": {
        "summary": "Get wallet",
        "description": "Get information on a specific wallet (e.g., the available balance). <br><br> To get wallet information, you'll need to specify the `/accounts/{accountID}/wallets.read` scope.",
        "operationId": "getWalletForAccount",
        "tags": [
          "Wallets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "in": "path",
            "name": "walletID",
            "required": true,
            "description": "The walletID for the wallet associated with an account",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Wallets associated with the given account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/transfers": {
      "post": {
        "summary": "Create a transfer",
        "description": "Move money by providing the source, destination, and amount in the request body. The path must indicate the platform account initiating the transfer via the URL parameter accountID. <br><br> To create a transfer, you must specify the `/accounts/{yourAccountID}/transfers.write` scope. <br> You can find your account id on the [Business details](https://dashboard.moov.io/settings/business) page.",
        "operationId": "createTransfer",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Idempotency-Key",
            "description": "Prevents duplicate transfers from being created",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "X-Wait-For",
            "description": "Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an asynchronous response indicating the transfer was created (this is the default response if the header is omitted).",
            "schema": {
              "$ref": "#/components/schemas/WaitFor"
            },
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransfer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a transfer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferPostResponse"
                }
              }
            }
          },
          "202": {
            "description": "A transfer was successfully created but a timeout occurred while waiting for a synchronous response. Rail-specific details may be missing from the response object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransferFull"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate transfer attempted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransferFull"
                }
              }
            }
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List transfers",
        "description": "List all the transfers associated with a particular Moov account. <br><br> To list transfers, you must specify the `/accounts/{yourAccountID}/transfers.read` scope. The accountID included must be your facilitator accountID. <br> You can find your accountID on the [Business details](https://dashboard.moov.io/settings/business) page.",
        "operationId": "listTransfers",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "List of transfers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransfers"
                },
                "examples": {
                  "getTransfers": {
                    "$ref": "#/components/examples/getTransfers"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "accountIDs",
            "schema": {
              "type": "string"
            },
            "allowReserved": true,
            "description": "Optional, comma-separated account IDs in which the response is filtered based on whether the account ID is the source or destination.",
            "example": "9506dbf6-4208-44c3-ad8a-e4431660e1f2,3f9969cf-a1f3-4d83-8ddc-229a506651cf,9fdb70f8-79f5-4016-853e-34c40c3b09b0"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/TransferStatus"
            },
            "description": "Optional transfer status by which to filter the transfers."
          },
          {
            "in": "query",
            "name": "startDateTime",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "description": "Optional date-time which inclusively filters all transfers created after this starting date-time.",
            "example": "2009-11-10T23:00:00Z"
          },
          {
            "in": "query",
            "name": "endDateTime",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "description": "Optional date-time which exclusively filters all transfers created before this date-time.",
            "example": "2009-11-13T01:00:00Z"
          },
          {
            "in": "query",
            "name": "groupID",
            "schema": {
              "type": "string"
            },
            "description": "Optional ID to filter for transfers in the same group.",
            "example": "683660e3-218c-4f5a-b193-930bd6d2f98e"
          },
          {
            "in": "query",
            "name": "count",
            "description": "Optional parameter to limit the number of results in the query",
            "example": 10,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "string"
            },
            "description": "The number of items to offset before starting to collect the result set",
            "example": 10
          },
          {
            "in": "query",
            "name": "refunded",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional paramter to only return refunded transfers",
            "example": false
          }
        ]
      }
    },
    "/transfers/{transferID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/parameters-AccountID"
        },
        {
          "$ref": "#/components/parameters/TransferID"
        }
      ],
      "get": {
        "summary": "Get a transfer",
        "description": "Retrieve full transfer details such as the amount, source, and destination. Payment rail-specific details are included in the source and destination. <br><br> To get a transfer, you must specify the `/accounts/{yourAccountID}/transfers.read` scope. The accountID included must be your facilitator accountID. <br> You can find your accountID on the [Business details](https://dashboard.moov.io/settings/business) page.",
        "operationId": "getTransfer",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Details of a transfer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransferFull"
                },
                "examples": {
                  "getTransfer": {
                    "$ref": "#/components/examples/getTransfer"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "patch": {
        "summary": "Patch transfer metadata",
        "description": "Update the metadata contained on a transfer <br><br> To patch a transfer, you must specify the `/accounts/{yourAccountID}/transfers.write` scope. The accountID included must be your facilitator accountID. <br> You can find your account ID on the [Business details](https://dashboard.moov.io/settings/business) page.",
        "operationId": "patchTransfer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchTransfer"
              }
            }
          }
        },
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Details of a transfer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransferFull"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/transfer-options": {
      "post": {
        "summary": "Get transfer options",
        "description": "Generate available payment method options for one or multiple transfer participants depending on the accountID or paymentMethodID you supply in the request. <br><br> To get transfer options, you must specify the `/accounts/{yourAccountID}/transfers.read` scope. The accountID you include should be associated with the facilitator account. <br> You can find your accountID on the [Business details](https://dashboard.moov.io/settings/business) page.\n",
        "operationId": "createTransferOptions",
        "tags": [
          "Transfers"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransferOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesfully created transfer options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedTransferOptions"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/transfers/{transferID}/refunds": {
      "parameters": [
        {
          "$ref": "#/components/parameters/TransferID"
        }
      ],
      "post": {
        "summary": "Refund a transfer",
        "description": "Initiate a refund for a card transfer",
        "operationId": "refundTransfer",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Idempotency-Key",
            "description": "Prevents duplicate transfers from being created",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully initiated a card refund",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedRefund"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "Get a list of refunds for a card transfer",
        "description": "Get a list of refunds for a card transfer",
        "operationId": "getRefunds",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "List of refunds",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRefunds"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/transfers/{transferID}/refunds/{refundID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/TransferID"
        },
        {
          "$ref": "#/components/parameters/RefundID"
        }
      ],
      "get": {
        "summary": "Get refund details",
        "description": "Get details of a specific refund",
        "operationId": "getRefund",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Refund details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRefund"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/bank-accounts": {
      "post": {
        "summary": "Bank account",
        "operationId": "bankAccount",
        "description": "Link a bank account to an existing Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.write` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                }
              }
            },
            "description": "Bank account added"
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List bank accounts",
        "operationId": "listBankAccounts",
        "description": "List all the bank accounts associated with a particular Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.read` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved bank accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccounts"
                }
              }
            }
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/bank-accounts/{bankAccountID}": {
      "get": {
        "summary": "Get bank account",
        "operationId": "getBank",
        "description": "Retrieve bank account details (i.e. routing number or account type) associated with a specific Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.read` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/BankAccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved bank account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "summary": "Disable bank account",
        "operationId": "deleteBank",
        "description": "Discontinue using a specified bank account linked to a Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.write` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/BankAccountID"
          }
        ],
        "responses": {
          "204": {
            "description": "Bank account disabled"
          },
          "404": {
            "description": "No bank account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/bank-accounts/{bankAccountID}/micro-deposits": {
      "post": {
        "summary": "Initiate micro-deposits",
        "operationId": "initiateMicroDeposits",
        "description": "Micro-deposits help confirm bank account ownership, helping reduce fraud and the risk of unauthorized activity. Use this method to initiate the micro-deposit verification, sending two small credit transfers to the bank account you want to confirm. If you request micro-deposits before 4:15PM ET, they will appear that same day. If you request micro-deposits any time after 4:15PM ET, they will appear the next banking day. <br><br> `sandbox` - Micro-deposits initiated for a `sandbox` bank account will always be `$0.00` / `$0.00` and instantly verifiable once initiated. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.write` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/BankAccountID"
          }
        ],
        "responses": {
          "204": {
            "description": "Micro-Deposits Successfully initiated"
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "422": {
            "description": "The bank account is not a bank account or is already pending verification"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "put": {
        "summary": "Complete micro-deposits",
        "operationId": "completeMicroDeposits",
        "description": "Complete the micro-deposit validation process by passing the amounts of the two transfers. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.write` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/BankAccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteMicroDepositsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Micro-Deposits Successfully verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteMicroDepositsResponse"
                }
              }
            }
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "422": {
            "description": "The amounts provided are incorrect or micro-deposits haven't been sent for the source."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/cards": {
      "post": {
        "servers": [
          {
            "url": "https://cards.moov.io/api",
            "description": "Production"
          }
        ],
        "summary": "Link card",
        "operationId": "card",
        "description": "Link a card to an existing Moov Account. Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.\n\nNote that this endpoint is from the `https://cards.moov.io/api` domain.\n",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "in": "header",
            "name": "X-Wait-For",
            "description": "Optional header that indicates whether to return a synchronous response or an asynchronous response.",
            "schema": {
              "$ref": "#/components/schemas/schemas-WaitFor"
            },
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            },
            "description": "Card linked"
          },
          "404": {
            "description": "No account with the specified accountID was found"
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List cards",
        "operationId": "listCards",
        "description": "List all the cards associated with a Moov account.",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved cards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cards"
                }
              }
            }
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/cards/{cardID}": {
      "get": {
        "summary": "Get card",
        "operationId": "getCard",
        "description": "Retrieve all the cards associated with a Moov account.",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CardID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "servers": [
          {
            "url": "https://cards.moov.io",
            "description": "Moov PCI environment"
          }
        ],
        "summary": "Disable card",
        "operationId": "deleteCard",
        "description": "Disables a card associated with a Moov account.",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CardID"
          }
        ],
        "responses": {
          "204": {
            "description": "Card disabled"
          },
          "404": {
            "description": "No card with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/issuing/{accountID}/issued-cards": {
      "post": {
        "summary": "Request card",
        "operationId": "requestCard",
        "description": "Request a virtual card be created\n\nNote that this endpoint is from the `https://cards.moov.io/api` domain.\n",
        "servers": [
          {
            "url": "https://cards.moov.io",
            "description": "Moov PCI environment"
          }
        ],
        "tags": [
          "Card issuing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestCard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedCard"
                }
              }
            },
            "description": "Card created"
          },
          "404": {
            "description": "No account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List issued cards",
        "operationId": "listIssuedCards",
        "description": "List Moov issued cards existing to the account\n\nNote that this endpoint is from the `https://cards.moov.io/api` domain.\n",
        "servers": [
          {
            "url": "https://cards.moov.io",
            "description": "Moov PCI environment"
          }
        ],
        "tags": [
          "Card issuing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedCards"
                }
              }
            },
            "description": "Card created"
          },
          "404": {
            "description": "No account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/issuing/{accountID}/issued-cards/{cardID}": {
      "get": {
        "summary": "Get issued card",
        "operationId": "getIssuedCard",
        "description": "Retrieve a single issued card associated with a Moov account\n\nNote that this endpoint is from the `https://cards.moov.io/api` domain.\n",
        "servers": [
          {
            "url": "https://cards.moov.io",
            "description": "Moov PCI environment"
          }
        ],
        "tags": [
          "Card issuing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CardID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedCard"
                }
              }
            },
            "description": "Card created"
          },
          "404": {
            "description": "No account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "patch": {
        "summary": "Update issued card",
        "operationId": "updateIssuedCard",
        "description": "Update a Moov issued card\n\nNote that this endpoint is from the `https://cards.moov.io/api` domain.\n",
        "servers": [
          {
            "url": "https://cards.moov.io",
            "description": "Moov PCI environment"
          }
        ],
        "tags": [
          "Card issuing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CardID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIssuedCard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card created"
          },
          "404": {
            "description": "No issued card with the specified accountID and cardID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/issuing/{accountID}/issued-cards/{cardID}/details": {
      "get": {
        "summary": "Get full card details",
        "operationId": "getFullIssuedCard",
        "description": "Get issued card with PAN, CVV, and expiration\n\nNote that this endpoint is from the `https://cards.moov.io/api` domain.\n",
        "servers": [
          {
            "url": "https://cards.moov.io",
            "description": "Moov PCI environment"
          }
        ],
        "tags": [
          "Card issuing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CardID"
          }
        ],
        "responses": {
          "200": {
            "description": "Card created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullIssuedCard"
                }
              }
            }
          },
          "404": {
            "description": "No issued card with the specified accountID and cardID was found. An error will be returned\nfor cards without PAN or CVV. Pending cards will not have a PAN or CVV.\n"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/issuing/{accountID}/transactions": {
      "get": {
        "summary": "Get account transactions",
        "operationId": "listAccountIssuedCardTransactions",
        "description": "List issued card transactions associated with a Moov account\n\nNote that this endpoint is from the `https://cards.moov.io/api` domain.\n",
        "servers": [
          {
            "url": "https://cards.moov.io",
            "description": "Moov PCI environment"
          }
        ],
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedCardTransactions"
                }
              }
            },
            "description": "Card created"
          },
          "404": {
            "description": "No account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/payment-methods": {
      "get": {
        "summary": "Get payment methods",
        "operationId": "getPaymentMethods",
        "description": "Retrieve all of the payment methods associated with a Moov account. <br><br> To get payment methods, you must specify the `/accounts/{accountID}/payment-methods.read` scope.",
        "tags": [
          "Payment methods"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "name": "sourceID",
            "in": "query",
            "required": false,
            "description": "Optional parameter to filter the account's payment methods by source ID.",
            "example": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved payment methods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethods"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/payment-methods/{paymentMethodID}": {
      "get": {
        "summary": "Get payment method",
        "operationId": "getPaymentMethod",
        "description": "Get the specified payment method associated with a Moov account. <br><br> To get a payment method, you must specify the `/accounts/{accountID}/payment-methods.read` scope.",
        "tags": [
          "Payment methods"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/PaymentMethodID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved payment method",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "404": {
            "description": "No payment method with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/capabilities/{capabilityID}": {
      "get": {
        "summary": "Get capability for account",
        "operationId": "getCapability",
        "description": "Retrieve a specific capability that an account has requested. <br><br> To use this endpoint, you must specify the `/accounts/{accountID}/capabilities.read` scope.",
        "tags": [
          "Capabilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CapabilityID"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested capability",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Capability"
                }
              }
            }
          },
          "404": {
            "description": "No Account with the specified capabilityID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "summary": "Disable a capability for an account",
        "operationId": "disableCapability",
        "description": "Disable a specific capability that an account has requested. <br><br> To use this endpoint, you must specify the `/accounts/{accountID}/capabilities.write` scope.",
        "tags": [
          "Capabilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CapabilityID"
          }
        ],
        "responses": {
          "204": {
            "description": "The capability has been disabled."
          },
          "404": {
            "description": "No Account with the specified capabilityID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/capabilities": {
      "get": {
        "summary": "List capabilities for account",
        "operationId": "listCapabilities",
        "description": "Retrieve all the capabilities an account has requested. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/capabilities.read` scope.",
        "tags": [
          "Capabilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of capabilities for the account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Capability"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "post": {
        "summary": "Request capabilities",
        "operationId": "addCapabilities",
        "description": "Request capabilities for a specific account. <br><br> To use this endpoint, you must specify the `/accounts/{accountID}/capabilities.write` scope.",
        "tags": [
          "Capabilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCapabilityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of capabilities for the account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Capability"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "409": {
            "description": "The request could not be processed due to a state conflict with the target resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapabilityRequestError"
                }
              }
            }
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/industries": {
      "get": {
        "summary": "List all industries",
        "operationId": "listIndustries",
        "description": "Returns a list of all industry titles and their corresponding MCC/SIC/NAICS codes. Results are ordered by title.\n<br><br> To list industries, you must specify the `/profile-enrichment.read` scope.\n",
        "tags": [
          "Industries"
        ],
        "responses": {
          "200": {
            "description": "A list of industries and their codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Industries"
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{rail}/search": {
      "get": {
        "tags": [
          "Institutions"
        ],
        "summary": "Search institutions",
        "description": "Search for institutions by their routing number or name. <br><br> To use this endpoint, you need to specify the `/fed.read` scope.",
        "operationId": "searchInstitutions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Rail"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the financial institution",
            "example": "Farmers",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "routingNumber",
            "in": "query",
            "description": "Routing number for a financial institution",
            "example": 44112187,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Optional parameters to filter results",
            "example": "IA",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional parameter to limit the amount of results in the query",
            "example": 10,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to offset before starting to collect the result set",
            "example": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Financial institutions returned from a search",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialInstitutions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "description": "Internal error, check error(s) and report the issue."
          }
        }
      }
    },
    "/avatars/{uniqueID}": {
      "get": {
        "summary": "Get avatar",
        "operationId": "getAvatar",
        "description": "Get avatar image for an account using a unique ID.\n<br><br> To get an avatar, you must specify the `/profile-enrichment.read` scope.\n",
        "tags": [
          "Avatars"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UniqueID"
          }
        ],
        "responses": {
          "200": {
            "description": "The avatar image",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "No image with the specified uniqueID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/enrichment/address": {
      "get": {
        "summary": "Get address suggestions",
        "operationId": "getEnrichmentAddress",
        "description": "Fetch enriched address suggestions. Requires a partial address.\n<br><br> You must specify the `/profile-enrichment.read` scope.\n",
        "tags": [
          "Enriched address"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Partial or complete address to search.\n",
            "example": "123 Main Street",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Maximum number of results to return.\n",
            "example": 10,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "includeCities",
            "in": "query",
            "description": "Limits results to a list of given cities.\n",
            "example": "chicago;honolulu;portland",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeStates",
            "in": "query",
            "description": "Limits results to a list of given states.\n",
            "example": "illinois;hawaii;oregon",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeZipcodes",
            "in": "query",
            "description": "Limits results to a list of given zipcodes.\n",
            "example": "60412;96818;97209",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeStates",
            "in": "query",
            "description": "Exclude list of states from results. No `include` pararmeters may be used with this parameter.\n",
            "example": "AZ;WA;SC",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferCities",
            "in": "query",
            "description": "Display results with the listed cities at the top.\n",
            "example": "denver;aurora;omaha",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferStates",
            "in": "query",
            "description": "Display results with the listed states at the top.\n",
            "example": "CO;MN;WI",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferZipcodes",
            "in": "query",
            "description": "Display results with the listed zipcodes at the top.\n",
            "example": "60412;96818;97209",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferRatio",
            "in": "query",
            "description": "Specifies the percentage of address suggestions that should be preferred and will appear at the top of the results.\n",
            "example": 45,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "preferGeolocation",
            "in": "query",
            "description": "If omitted or set to `city` it uses the sender's IP address to determine location, then automatically adds the city and state to the preferCities value. This parameter takes precedence over other `include` or `exclude` parameters meaning that if it is not set to `none` you may see addresses from areas you do not wish to see.\n",
            "example": "none",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selected",
            "in": "query",
            "description": "Useful for narrowing results with `addressLine2` suggestions such as `Apt` (denotes an apartment building with multiple residences).\n",
            "example": "Apt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Include results from alternate data sources. Allowed values are -- `all` (non-postal addresses) or `postal` (postal addresses only).\n",
            "example": "all",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnrichmentAddress"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/enrichment/profile": {
      "get": {
        "summary": "Get enriched profile",
        "operationId": "getEnrichmentProfile",
        "description": "Fetch enriched profile data. Requires a valid email address.\n<br><br> To get enriched profile information, you must specify the `/profile-enrichment.read` scope.\n",
        "tags": [
          "Enriched profile"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Valid email address belonging to the profile of interest\n",
            "example": "employee@business.com",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The enriched profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichmentProfile"
                }
              }
            }
          },
          "404": {
            "description": "No profile found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "503": {
            "description": "The service is unavailable"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/analytics/transfers/sum": {
      "post": {
        "summary": "Sum all transfers across intervals",
        "operationId": "analyticsTransferSum",
        "tags": [
          "Analytics"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransferSums"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/analytics/transfers/largest": {
      "post": {
        "summary": "Return the largest number of transfers",
        "operationId": "analyticsTransferLargest",
        "tags": [
          "Analytics"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitedTimeRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SpecificTransfers"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/analytics/transfers/smallest": {
      "post": {
        "summary": "Return the smallest number of transfers",
        "operationId": "analyticsTransferSmallest",
        "tags": [
          "Analytics"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitedTimeRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SpecificTransfers"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/analytics/transfers/statuses": {
      "post": {
        "summary": "Count the transfer statuses",
        "operationId": "analyticsTransferStatuses",
        "tags": [
          "Analytics"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransferStatusCounts"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/analytics/accounts/profiles-created": {
      "post": {
        "summary": "Count the number of profiles created by an individual or business",
        "operationId": "analyticsAccountsCreated",
        "tags": [
          "Analytics"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProfilesCreated"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "description": "Error response for http requests that failed",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "error": {
            "example": "micro deposits values are incorrect",
            "type": "string"
          }
        }
      },
      "AccountCreated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "AcountUpdated": {
        "$ref": "#/components/schemas/AccountUpdated"
      },
      "AccountDeleted": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "RepresentativeCreated": {
        "type": "object",
        "properties": {
          "representativeID": {
            "type": "string",
            "description": "ID of the representative"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "RepresentativeUpdated": {
        "type": "object",
        "properties": {
          "representativeID": {
            "type": "string",
            "description": "ID of the representative"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "RepresentativeDeleted": {
        "type": "object",
        "properties": {
          "representativeID": {
            "type": "string",
            "description": "ID of the representative"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "CapabilityRequested": {
        "type": "object",
        "properties": {
          "capabilityID": {
            "type": "string",
            "description": "ID of the capability"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account requesting the capability"
          }
        }
      },
      "CapabilityUpdated": {
        "type": "object",
        "properties": {
          "capabilityID": {
            "type": "string",
            "description": "ID of the capability"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account requesting the capability"
          },
          "status": {
            "type": "string",
            "description": "Status of the capability"
          }
        }
      },
      "BankAccountCreated": {
        "type": "object",
        "properties": {
          "bankAccountID": {
            "type": "string",
            "description": "ID of the bank account"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account where the bank account was created"
          }
        }
      },
      "BankAccountUpdated": {
        "type": "object",
        "properties": {
          "bankAccountID": {
            "type": "string",
            "description": "ID of the bank account"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account where the bank account was updated"
          },
          "status": {
            "type": "string",
            "description": "Status of the bank account"
          }
        }
      },
      "BankAccountDeleted": {
        "type": "object",
        "properties": {
          "bankAccountID": {
            "type": "string",
            "description": "ID of the bank account"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account where the bank account was deleted"
          }
        }
      },
      "TransferCreated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the facilitator account"
          },
          "transferID": {
            "type": "string",
            "description": "ID of the transfer"
          },
          "status": {
            "type": "string",
            "description": "Status of the transfer"
          }
        }
      },
      "TransferUpdated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the facilitator account"
          },
          "transferID": {
            "type": "string",
            "description": "ID of the transfer"
          },
          "status": {
            "type": "string",
            "description": "Status of the transfer"
          },
          "source": {
            "$ref": "#/components/schemas/TransferPaymentMethod"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferPaymentMethod"
          }
        }
      },
      "PaymentMethodEnabled": {
        "type": "object",
        "properties": {
          "paymentMethodID": {
            "type": "string",
            "description": "ID of the payment method"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the facilitator account"
          },
          "sourceID": {
            "type": "string",
            "description": "ID of the bank account, card, or wallet"
          }
        }
      },
      "PaymentMethodDisabled": {
        "type": "object",
        "properties": {
          "paymentMethodID": {
            "type": "string",
            "description": "ID of the payment method"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the facilitator account"
          },
          "sourceID": {
            "type": "string",
            "description": "ID of the bank account, card, or wallet"
          }
        }
      },
      "BalanceUpdated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the Account associated with the wallet"
          },
          "walletID": {
            "type": "string",
            "description": "ID of the Wallet"
          },
          "balance": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "RefundCreated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the Account associated with the refund transfer"
          },
          "originalTransferID": {
            "type": "string",
            "description": "ID of the original transfer"
          },
          "refundTransferID": {
            "type": "string",
            "description": "ID of the refund transfer"
          }
        }
      },
      "RefundUpdated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the Account associated with the refund transfer"
          },
          "originalTransferID": {
            "type": "string",
            "description": "ID of the original transfer"
          },
          "refundTransferID": {
            "type": "string",
            "description": "ID of the refund transfer"
          },
          "status": {
            "type": "string",
            "description": "Status of the refund transfer"
          }
        }
      },
      "Email": {
        "description": "Email Address",
        "type": "string",
        "format": "email",
        "example": "amanda@classbooker.dev",
        "pattern": "^([a-zA-Z0-9_\\-\\.]+\\+?[a-zA-Z0-9\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
        "maxLength": 255
      },
      "Signup": {
        "description": "Self signup request",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "Password": {
        "description": "Describes a password for a user",
        "type": "string",
        "pattern": "^.*$",
        "example": "horse Battery st@ple 123",
        "minLength": 8,
        "maxLength": 128
      },
      "Signin": {
        "description": "Signin with password credentials",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          }
        }
      },
      "UUID": {
        "description": "UUID v4",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "example": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43",
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "DateTime": {
        "type": "string",
        "format": "date-time",
        "maxLength": 24
      },
      "GivenName": {
        "description": "Name this person was given. This is usually the the same as first name.",
        "type": "string",
        "pattern": "^\\w+$",
        "example": "Amanda",
        "maxLength": 64
      },
      "FamilyName": {
        "description": "Family name of this person. This is usually the the same as last name.",
        "type": "string",
        "pattern": "^\\w+$",
        "example": "Yang",
        "maxLength": 64
      },
      "OptionalURL": {
        "type": "string",
        "format": "url",
        "example": "https://placekitten.com/408/287",
        "nullable": true,
        "maxLength": 255
      },
      "User": {
        "description": "User model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userID": {
            "$ref": "#/components/schemas/UUID"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "lastLoginOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "givenName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "familyName": {
            "$ref": "#/components/schemas/FamilyName"
          },
          "photoURL": {
            "$ref": "#/components/schemas/OptionalURL"
          }
        }
      },
      "Base64": {
        "description": "Base64 string of data",
        "type": "string",
        "format": "byte",
        "example": "U3dhZ2dlciByb2Nrcw==",
        "maxLength": 1024
      },
      "DeviceFingerprint": {
        "description": "Device hash generated by a frontend library.",
        "type": "string",
        "pattern": "^\\w+$",
        "example": "fBkwz3q43jlTHB8wFtiDgxT0WMpjUmDvMsTbQbz1",
        "maxLength": 64
      },
      "Setup": {
        "description": "Setup password authentication",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Base64"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          },
          "givenName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "familyName": {
            "$ref": "#/components/schemas/FamilyName"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/DeviceFingerprint"
          }
        }
      },
      "ChangePassword": {
        "description": "User model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          },
          "newPassword": {
            "$ref": "#/components/schemas/Password"
          }
        }
      },
      "Recover": {
        "description": "Email to send recover instructions to",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "ResetPassword": {
        "description": "Email to send recover instructions to",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "token": {
            "$ref": "#/components/schemas/Base64"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          }
        }
      },
      "URL": {
        "type": "string",
        "format": "url",
        "example": "https://placekitten.com/408/287",
        "maxLength": 255
      },
      "DeviceInfo": {
        "description": "Current device information",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fingerprint": {
            "$ref": "#/components/schemas/DeviceFingerprint"
          }
        }
      },
      "DeviceVerification": {
        "description": "Return to state if this device is verified, and if not how to verify",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "verified": {
            "type": "boolean"
          }
        },
        "required": [
          "verified"
        ]
      },
      "TOTPCode": {
        "description": "6 digit TOTP code",
        "type": "string",
        "pattern": "^[1-9][0-9]{5}$",
        "example": "123456",
        "maxLength": 6
      },
      "VerifyViaEmail": {
        "description": "Current device information",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fingerprint": {
            "$ref": "#/components/schemas/DeviceFingerprint"
          },
          "code": {
            "$ref": "#/components/schemas/TOTPCode"
          }
        }
      },
      "SendViaEmail": {
        "description": "Send the code via email attached to the user",
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "Scope": {
        "description": "A space-delimited list of [scopes](https://docs.moov.io/guides/developer-tools/api-keys/scopes/) that are allowed",
        "type": "string",
        "example": "/accounts.write"
      },
      "AccessToken": {
        "description": "String passed to the authorization server to gain access to the system",
        "example": "i1qxz68gu50zp4i8ceyxqogmq7y0yienm52351c6...",
        "type": "string",
        "format": "byte",
        "maxLength": 4096
      },
      "ClientCredentialsGrantToAccessTokenRequest": {
        "description": "Allows the use of `Client Credentials Grant` per the RFC 6749 of (OAuth 2.0 Authorization Framework)[https://tools.ietf.org/html/rfc6749#section-4.4]. Following this specification will allow any tooling to be able to use this API to get an `access_token`.",
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "client_credentials",
              "refresh_token"
            ]
          },
          "client_id": {
            "description": "If not specified in `Authorization: Basic` it can be specified here",
            "example": "5clTR_MdVrrkgxw2",
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "client_secret": {
            "description": "If not specified in `Authorization: Basic` it can be specified here",
            "example": "dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-",
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "refresh_token": {
            "$ref": "#/components/schemas/AccessToken"
          }
        },
        "required": [
          "grant_type"
        ]
      },
      "ExpiresIn": {
        "description": "Number of seconds the token is valid for.",
        "type": "integer",
        "format": "int32",
        "example": 900
      },
      "ClientCredentialsGrantToAccessTokenResponse": {
        "description": "Device model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "access_token": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "refresh_token": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "token_type": {
            "description": "Type of token returned. Opaque is not parse-able while JWT follows JWT spec.",
            "type": "string",
            "enum": [
              "opaque",
              "jwt"
            ]
          },
          "expires_in": {
            "$ref": "#/components/schemas/ExpiresIn"
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          }
        }
      },
      "AccessTokenResponse": {
        "description": "Possible responses that can be made to the /token endpoints. The type of response returned here will mirror the type of the request",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClientCredentialsGrantToAccessTokenResponse"
          }
        ]
      },
      "ClientCredentialsGrantToAccessTokenErrorResponse": {
        "description": "Error happened when trying to obtain an access token",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "error": {
            "type": "string",
            "enum": [
              "invalid_request",
              "invalid_client",
              "invalid_grant",
              "unauthorized_client",
              "unsupported_grant_type",
              "invalid_scope"
            ]
          }
        }
      },
      "AccessTokenErrorResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClientCredentialsGrantToAccessTokenErrorResponse"
          }
        ]
      },
      "RevokeTokenRequest": {
        "description": "Allows clients to notify the authorization server that a previously obtained refresh or access token is no longer needed",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "token_type_hint": {
            "description": "A hint about the type of the token submitted for revocation",
            "type": "string",
            "enum": [
              "access_token",
              "refresh_token"
            ]
          },
          "client_id": {
            "description": "If not specified in `Authorization: Basic` it can be specified here",
            "example": "5clTR_MdVrrkgxw2",
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "client_secret": {
            "description": "If not specified in `Authorization: Basic` it can be specified here",
            "example": "dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-",
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "required": [
          "token"
        ]
      },
      "Session": {
        "description": "Session model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userID": {
            "$ref": "#/components/schemas/UUID"
          },
          "givenName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "familyName": {
            "$ref": "#/components/schemas/FamilyName"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "expiresOn": {
            "type": "integer",
            "format": "int64",
            "description": "Number of seconds from epoch that this will expire on"
          },
          "globalExpiresOn": {
            "type": "integer",
            "format": "int64",
            "description": "Number of seconds from epoch that this session will globally expire on"
          },
          "photoURL": {
            "$ref": "#/components/schemas/OptionalURL"
          }
        }
      },
      "AccountID": {
        "description": "ID of Account",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "OptionalDateTime": {
        "type": "string",
        "format": "date-time",
        "maxLength": 24,
        "nullable": true
      },
      "OptionalUUID": {
        "description": "UUID v4",
        "type": "string",
        "format": "uuid",
        "example": "f5f47bfa-fa5a-41f4-99eb-8671c1875b3f",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
        "nullable": true
      },
      "Invite": {
        "description": "Describes an invite that was sent to a user to join.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "inviteID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountID": {
            "$ref": "#/components/schemas/UUID"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "invitedBy": {
            "$ref": "#/components/schemas/UUID"
          },
          "invitedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "redeemedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "expiresOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "disabledOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "disabledBy": {
            "$ref": "#/components/schemas/OptionalUUID"
          },
          "declinedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "declinedBy": {
            "$ref": "#/components/schemas/OptionalUUID"
          },
          "roles": {
            "description": "List of roleID's to add the user to once invite has been accepted",
            "type": "array",
            "maxItems": 300,
            "items": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        }
      },
      "SendInvite": {
        "description": "Describes an invite that was sent to a user to join.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "roles": {
            "description": "List of roleID's to add the user to once invite has been accepted",
            "type": "array",
            "maxItems": 300,
            "items": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        }
      },
      "ResendInvite": {
        "description": "Describes an invite to be resent",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "inviteID": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "AccountType": {
        "description": "The type of entity represented by this Account",
        "example": "business",
        "type": "string",
        "enum": [
          "individual",
          "business"
        ]
      },
      "ForeignID": {
        "description": "Serves as an optional alias from a foreign/external system which can be used to reference this resource",
        "type": "string",
        "example": "4528aba-b9a1-11eb-8529-0242ac13003",
        "maxLength": 64
      },
      "Mode": {
        "description": "The mode this account is allowed to be used within.",
        "example": "production",
        "type": "string",
        "enum": [
          "sandbox",
          "production"
        ]
      },
      "Suffix": {
        "description": "Suffix of a given name",
        "type": "string",
        "pattern": "^\\w+$",
        "example": "Jr",
        "maxLength": 20
      },
      "Name": {
        "description": "Name for an individual",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "middleName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "lastName": {
            "$ref": "#/components/schemas/FamilyName"
          },
          "suffix": {
            "$ref": "#/components/schemas/Suffix"
          }
        }
      },
      "Phone": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "string",
            "format": "phone",
            "example": "8185551212",
            "maxLength": 10
          },
          "countryCode": {
            "type": "string",
            "example": "1",
            "maxLength": 1
          }
        }
      },
      "Address": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "addressLine1": {
            "type": "string",
            "example": "123 Main Street",
            "maxLength": 32
          },
          "addressLine2": {
            "type": "string",
            "example": "Apt 302",
            "maxLength": 32
          },
          "city": {
            "type": "string",
            "example": "Boulder",
            "maxLength": 24
          },
          "stateOrProvince": {
            "type": "string",
            "example": "CO",
            "maxLength": 2
          },
          "postalCode": {
            "type": "string",
            "example": "80301",
            "maxLength": 5
          },
          "country": {
            "type": "string",
            "example": "US",
            "maxLength": 2
          }
        }
      },
      "Individual": {
        "description": "Describes an individual",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDateProvided": {
            "description": "Indicates whether this Individual's birth date has been provided",
            "type": "boolean",
            "default": false
          },
          "governmentIDProvided": {
            "description": "Indicates whether a government ID (SSN, ITIN, etc.) has been provided for this Individual",
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "name",
          "birthDateProvided",
          "governmentIDProvided"
        ]
      },
      "BusinessType": {
        "description": "The type of entity represented by this Business",
        "type": "string",
        "example": "llc",
        "enum": [
          "soleProprietorship",
          "unincorporatedAssociation",
          "trust",
          "publicCorporation",
          "privateCorporation",
          "llc",
          "partnership",
          "unincorporatedNonProfit",
          "incorporatedNonProfit"
        ]
      },
      "Responsibilities": {
        "description": "Describes the job responsibilities of an individual",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "isController": {
            "description": "Indicates whether this individual has significant management responsibilities within the business",
            "type": "boolean",
            "example": false,
            "default": false
          },
          "isOwner": {
            "description": "Indiciates whether this individual has an ownership stake of at least 25% in the business",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "ownershipPercentage": {
            "description": "The percentage of ownership this individual has in the business (required if `isOwner` is `true`)",
            "type": "integer",
            "example": 38
          },
          "jobTitle": {
            "type": "string",
            "example": "CEO",
            "maxLength": 64
          }
        },
        "required": [
          "isController",
          "isOwner",
          "ownershipPercentage",
          "jobTitle"
        ]
      },
      "Representative": {
        "description": "Describes a business representative",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "representativeID": {
            "$ref": "#/components/schemas/UUID"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDateProvided": {
            "description": "Indicates whether this Representative's birth date has been provided",
            "type": "boolean",
            "default": false
          },
          "governmentIDProvided": {
            "description": "Indicates whether a government ID (SSN, ITIN, etc.) has been provided for this Representative",
            "type": "boolean",
            "default": false
          },
          "responsibilities": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Responsibilities"
              }
            ]
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "disabledOn": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              }
            ]
          }
        },
        "required": [
          "name",
          "birthDateProvided",
          "governmentIDProvided",
          "createdOn",
          "updatedOn"
        ]
      },
      "IndustryCodes": {
        "description": "Describes industry specific identifiers",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "naics": {
            "type": "string",
            "example": "713940",
            "minLength": 2,
            "maxLength": 6
          },
          "sic": {
            "type": "string",
            "example": "7991",
            "minLength": 4,
            "maxLength": 4
          },
          "mcc": {
            "type": "string",
            "example": "7997",
            "minLength": 4,
            "maxLength": 4
          }
        }
      },
      "Business": {
        "description": "Describes a business",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "legalBusinessName": {
            "type": "string",
            "maxLength": 64
          },
          "doingBusinessAs": {
            "type": "string",
            "maxLength": 64
          },
          "businessType": {
            "$ref": "#/components/schemas/BusinessType"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "website": {
            "example": "www.wholebodyfitnessgym.com",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "example": "Local fitness gym paying out instructors",
            "minLength": 10,
            "maxLength": 100
          },
          "taxIDProvided": {
            "description": "Indicates whether a tax ID has been provided for this Business",
            "type": "boolean",
            "default": false
          },
          "representatives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Representative"
            },
            "example": []
          },
          "ownersProvided": {
            "type": "boolean"
          },
          "industryCodes": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryCodes"
              }
            ]
          }
        },
        "required": [
          "legalBusinessName",
          "businessType",
          "taxIDProvided",
          "ownersProvided"
        ]
      },
      "Profile": {
        "description": "Describes a Moov Account Profile",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "individual": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Individual"
              }
            ]
          },
          "business": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Business"
              }
            ]
          }
        }
      },
      "Metadata": {
        "description": "Free-form key-value pair list that can be added to a Moov account. Useful for storing account information that is not captured elsewhere.",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "IpAddress": {
        "type": "string",
        "format": "ipv4",
        "example": "127.0.0.1",
        "maxLength": 15
      },
      "TermsOfService": {
        "description": "Describes the acceptance of the Terms of Service",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "acceptedDate": {
            "$ref": "#/components/schemas/DateTime"
          },
          "acceptedIP": {
            "$ref": "#/components/schemas/IpAddress"
          }
        },
        "required": [
          "acceptedDate",
          "acceptedIP"
        ]
      },
      "VerificationStatus": {
        "description": "The status of an identity verification for a profile",
        "type": "string",
        "enum": [
          "unverified",
          "pending",
          "verified",
          "errored"
        ]
      },
      "VerificationStatusDetails": {
        "description": "Details of the verification status",
        "type": "string",
        "enum": [
          "failedAutoVerify",
          "docDobMismatch",
          "docNameMismatch",
          "docAddressMismatch",
          "docNumberMismatch",
          "docIncomplete",
          "docFailedRisk",
          "potentialAccountSanctionsMatch",
          "potentialRepresentativeSanctionsMatch",
          "failedOther"
        ]
      },
      "Document": {
        "description": "Describes an uploaded file",
        "type": "object",
        "properties": {
          "documentID": {
            "type": "string",
            "description": "A unique identifier for this document",
            "example": "e210a9d6"
          },
          "type": {
            "type": "string",
            "enum": [
              "DriversLicense",
              "Passport",
              "UtilityBill",
              "BankStatement"
            ]
          },
          "contentType": {
            "type": "string",
            "example": "application/pdf"
          },
          "parseErrors": {
            "description": "Optional array of errors encountered dring automated parsing.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uploadedAt": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "documentID",
          "type",
          "contentType",
          "uploadedAt"
        ]
      },
      "Verification": {
        "description": "Describes identity verification status and relevant identity verification documents",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "$ref": "#/components/schemas/VerificationStatus"
          },
          "details": {
            "$ref": "#/components/schemas/VerificationStatusDetails"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          }
        },
        "required": [
          "status"
        ]
      },
      "CustomerSupport": {
        "description": "User-provided information that can be displayed on credit card transactions for customers to use when contacting a customer support team. This data is only allowed on a business account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "website": {
            "example": "www.wholebodyfitnessgym.com",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "StatementDescriptor": {
        "description": "The description that shows up on credit card transactions. This will default to the accounts display name on account creation.",
        "type": "string",
        "example": "Whole Body Fitness",
        "pattern": "^([\\w0-9.!*-+_\\- ]+)$",
        "minLength": 4,
        "maxLength": 18
      },
      "CardPaymentSettings": {
        "description": "User provided settings to manage card payments. This data is only allowed on a business account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "statementDescriptor": {
            "$ref": "#/components/schemas/StatementDescriptor"
          }
        }
      },
      "AccountSettings": {
        "description": "User provided settings to manage an account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cardPayment": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CardPaymentSettings"
              }
            ]
          }
        }
      },
      "Account": {
        "description": "Describes a Moov account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "accountID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "displayName": {
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "termsOfService": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TermsOfService"
              }
            ]
          },
          "verification": {
            "$ref": "#/components/schemas/Verification"
          },
          "foreignID": {
            "$ref": "#/components/schemas/ForeignID"
          },
          "customerSupport": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerSupport"
              }
            ]
          },
          "settings": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountSettings"
              }
            ]
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "accountID",
          "accountType",
          "profile",
          "createdOn",
          "updatedOn"
        ]
      },
      "BirthDate": {
        "description": "Birthdate for an individual",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "day": {
            "type": "integer",
            "example": 9
          },
          "month": {
            "type": "integer",
            "example": 11
          },
          "year": {
            "type": "integer",
            "example": 1989
          }
        },
        "required": [
          "day",
          "month",
          "year"
        ]
      },
      "SSN": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "full": {
            "type": "string",
            "example": "123-45-6789",
            "maxLength": 64
          },
          "lastFour": {
            "type": "string",
            "example": "6789",
            "maxLength": 4
          }
        }
      },
      "ITIN": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "full": {
            "type": "string",
            "example": "123-45-6789",
            "maxLength": 64
          },
          "lastFour": {
            "type": "string",
            "example": "6789",
            "maxLength": 4
          }
        }
      },
      "GovernmentID": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ssn": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SSN"
              }
            ]
          },
          "itin": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ITIN"
              }
            ]
          }
        }
      },
      "CreateIndividual": {
        "description": "Describes the fields available when creating an individual",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDate": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BirthDate"
              }
            ]
          },
          "governmentID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GovernmentID"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "EIN": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "string",
            "example": "123-45-6789",
            "maxLength": 64
          }
        }
      },
      "TaxID": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ein": {
            "$ref": "#/components/schemas/EIN"
          }
        }
      },
      "CreateBusiness": {
        "description": "Describes the fields available when creating a business",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "legalBusinessName": {
            "example": "Whole Body Fitness LLC",
            "type": "string",
            "maxLength": 64
          },
          "doingBusinessAs": {
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64
          },
          "businessType": {
            "$ref": "#/components/schemas/BusinessType"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "website": {
            "example": "www.wholebodyfitnessgym.com",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "example": "Local fitness center paying out instructors",
            "type": "string",
            "maxLength": 100,
            "minLength": 10
          },
          "taxID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxID"
              }
            ]
          },
          "industryCodes": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryCodes"
              }
            ]
          }
        },
        "required": [
          "legalBusinessName",
          "businessType"
        ]
      },
      "CreateProfile": {
        "description": "Describes the fields available when creating a profile.\nIf `accountType` is set to `individual`, the `individual` object should be completed. All others should populate `business`.\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "individual": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIndividual"
              }
            ]
          },
          "business": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateBusiness"
              }
            ]
          }
        }
      },
      "TermsOfServiceToken": {
        "description": "An encrypted value used to record acceptance of Moov's Terms of Service",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "example": "kgT1uxoMAk7QKuyJcmQE8nqW_HjpyuXBabiXPi6T83fUQoxsyWYPcYzuHQTqrt7YRp4gCwyDQvb6U5REM9Pgl2EloCe35t-eiMAbUWGo3Kerxme6aqNcKrP_6-v0MTXViOEJ96IBxPFTvMV7EROI2dq3u4e-x4BbGSCedAX-ViAQND6hcreCDXwrO6sHuzh5Xi2IzSqZHxaovnWEboaxuZKRJkA3dsFID6fzitMpm2qrOh4"
          }
        }
      },
      "CapabilityID": {
        "description": "ID of Capability",
        "type": "string",
        "enum": [
          "transfers",
          "send-funds",
          "collect-funds",
          "wallet",
          "1099",
          "card-issuing"
        ]
      },
      "CreateAccountRequest": {
        "description": "Describes the fields available when creating a Moov Account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "profile": {
            "$ref": "#/components/schemas/CreateProfile"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "termsOfService": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TermsOfServiceToken"
              }
            ]
          },
          "foreignID": {
            "$ref": "#/components/schemas/ForeignID"
          },
          "customerSupport": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerSupport"
              }
            ]
          },
          "settings": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountSettings"
              }
            ]
          },
          "capabilities": {
            "description": "The list of capabilities to request when the account is created.",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityID"
            }
          }
        },
        "required": [
          "accountType",
          "profile"
        ]
      },
      "UpdateIndividual": {
        "description": "Describes the fields available when updating an individual",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDate": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BirthDate"
              }
            ]
          },
          "governmentID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GovernmentID"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateBusiness": {
        "description": "Describes the fields available when updating a business",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "legalBusinessName": {
            "example": "Whole Body Fitness LLC",
            "type": "string",
            "maxLength": 64
          },
          "doingBusinessAs": {
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64
          },
          "businessType": {
            "$ref": "#/components/schemas/BusinessType"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "website": {
            "example": "www.wholebodyfitnessgym.com",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "example": "Local fitness center paying out instructors",
            "type": "string",
            "maxLength": 100,
            "minLength": 10
          },
          "taxID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxID"
              }
            ]
          },
          "ownersProvided": {
            "type": "boolean"
          },
          "industryCodes": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryCodes"
              }
            ]
          }
        },
        "required": [
          "legalBusinessName",
          "businessType"
        ]
      },
      "UpdateProfile": {
        "description": "Describes the fields available when updating a profile.\nIf the account profile being updated represents an individual, the `individual` object should be completed. All others should populate `business`.\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "individual": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateIndividual"
              }
            ]
          },
          "business": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateBusiness"
              }
            ]
          }
        }
      },
      "UpdateAccountRequest": {
        "description": "Describes the fields available when updating a Moov Account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/UpdateProfile"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "termsOfService": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TermsOfServiceToken"
              }
            ]
          },
          "customerSupport": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerSupport"
              }
            ]
          },
          "settings": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountSettings"
              }
            ]
          },
          "foreignID": {
            "$ref": "#/components/schemas/ForeignID"
          }
        },
        "required": [
          "profile"
        ]
      },
      "PatchIndividual": {
        "description": "Describes the fields available when patching an individual",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Email"
              }
            ]
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDate": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BirthDate"
              }
            ]
          },
          "governmentID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GovernmentID"
              }
            ]
          }
        }
      },
      "PatchBusiness": {
        "description": "Describes the fields available when patching a business",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "legalBusinessName": {
            "nullable": true,
            "example": "Whole Body Fitness LLC",
            "type": "string",
            "maxLength": 64
          },
          "doingBusinessAs": {
            "nullable": true,
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64
          },
          "businessType": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessType"
              }
            ]
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Email"
              }
            ]
          },
          "website": {
            "nullable": true,
            "example": "www.wholebodyfitnessgym.com",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "nullable": true,
            "example": "Local fitness center paying out instructors",
            "type": "string",
            "maxLength": 100,
            "minLength": 10
          },
          "taxID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxID"
              }
            ]
          },
          "ownersProvided": {
            "nullable": true,
            "allOf": [
              {
                "type": "boolean"
              }
            ]
          },
          "industryCodes": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryCodes"
              }
            ]
          }
        }
      },
      "PatchProfile": {
        "description": "Describes the fields available when patching a profile.\nEach object can be patched independent of patching the other fields.\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "individual": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchIndividual"
              }
            ]
          },
          "business": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBusiness"
              }
            ]
          }
        }
      },
      "PatchAccountRequest": {
        "description": "Describes the fields available when patching a Moov Account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "profile": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchProfile"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "termsOfService": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TermsOfServiceToken"
              }
            ]
          },
          "foreignID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ForeignID"
              }
            ]
          },
          "customerSupport": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerSupport"
              }
            ]
          },
          "settings": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountSettings"
              }
            ]
          }
        }
      },
      "Countries": {
        "description": "The Countries of operation for an account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 64,
              "example": "United States"
            }
          }
        },
        "required": [
          "countries"
        ]
      },
      "CreateRepresentative": {
        "description": "Describes the fields available when creating a representative",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "required": [
              "firstName",
              "lastName"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDate": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BirthDate"
              }
            ]
          },
          "governmentID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GovernmentID"
              }
            ]
          },
          "responsibilities": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Responsibilities"
              }
            ]
          }
        }
      },
      "UpdateRepresentative": {
        "description": "Describes the fields available when updating a representative",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "required": [
              "firstName",
              "lastName"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDate": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BirthDate"
              }
            ]
          },
          "governmentID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GovernmentID"
              }
            ]
          },
          "responsibilities": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Responsibilities"
              }
            ]
          }
        }
      },
      "OptionalName": {
        "description": "Name for an individual",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "firstName": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GivenName"
              }
            ]
          },
          "middleName": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GivenName"
              }
            ]
          },
          "lastName": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FamilyName"
              }
            ]
          },
          "suffix": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Suffix"
              }
            ]
          }
        }
      },
      "OptionalPhone": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "number": {
            "nullable": true,
            "type": "string",
            "format": "phone",
            "example": "8185551212",
            "maxLength": 10
          },
          "countryCode": {
            "nullable": true,
            "type": "string",
            "example": "1",
            "maxLength": 1
          }
        }
      },
      "OptionalAddress": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "addressLine1": {
            "nullable": true,
            "type": "string",
            "example": "123 Main Street",
            "maxLength": 32
          },
          "addressLine2": {
            "nullable": true,
            "type": "string",
            "example": "Apt 302",
            "maxLength": 32
          },
          "city": {
            "nullable": true,
            "type": "string",
            "example": "Boulder",
            "maxLength": 24
          },
          "stateOrProvince": {
            "nullable": true,
            "type": "string",
            "example": "CO",
            "maxLength": 2
          },
          "postalCode": {
            "nullable": true,
            "type": "string",
            "example": "80301",
            "maxLength": 5
          },
          "country": {
            "nullable": true,
            "type": "string",
            "example": "US",
            "maxLength": 2
          }
        }
      },
      "OptionalResponsibilities": {
        "description": "Describes the job responsibilities of an individual",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "isController": {
            "nullable": true,
            "description": "Indicates whether this individual has significant management responsibilities within the business",
            "type": "boolean",
            "example": false,
            "default": false
          },
          "isOwner": {
            "nullable": true,
            "description": "Indiciates whether this individual has an ownership stake of at least 25% in the business",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "ownershipPercentage": {
            "nullable": true,
            "description": "The percentage of ownership this individual has in the business (required if `isOwner` is `true`)",
            "type": "integer",
            "example": 38
          },
          "jobTitle": {
            "nullable": true,
            "type": "string",
            "example": "CEO",
            "maxLength": 64
          }
        }
      },
      "PatchRepresentativeRequest": {
        "description": "Describes the fields available when patching a representative",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionalName"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionalPhone"
              }
            ]
          },
          "email": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Email"
              }
            ]
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionalAddress"
              }
            ]
          },
          "birthDate": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BirthDate"
              }
            ]
          },
          "governmentID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GovernmentID"
              }
            ]
          },
          "responsibilities": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionalResponsibilities"
              }
            ]
          }
        }
      },
      "UpdateUser": {
        "description": "User model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "givenName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "familyName": {
            "$ref": "#/components/schemas/FamilyName"
          }
        }
      },
      "schemas-Name": {
        "description": "Descriptive name allowing spaces.",
        "type": "string",
        "pattern": "^([\\w ]+)$",
        "example": "Amanda Yang",
        "maxLength": 64
      },
      "UserAccount": {
        "description": "Information about an account the user has access to.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "displayName": {
            "$ref": "#/components/schemas/schemas-Name"
          }
        }
      },
      "UserInvite": {
        "description": "Information about an invitation sent to the user",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "inviteID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "displayName": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "expiresOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "Resource": {
        "description": "Describes a permission thats allow",
        "type": "string",
        "enum": [
          "/account",
          "/profile",
          "/representatives",
          "/bank-accounts",
          "/applications",
          "/tos",
          "/transfers",
          "/wallets",
          "/connections",
          "/documents",
          "/invites"
        ]
      },
      "Action": {
        "description": "Describes the action that can be taken on a resource",
        "type": "string",
        "enum": [
          "read",
          "write"
        ]
      },
      "RolePolicy": {
        "description": "Describes a permission thats allowed",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Resource"
          },
          "action": {
            "$ref": "#/components/schemas/Action"
          }
        },
        "required": [
          "resource",
          "action"
        ]
      },
      "Role": {
        "description": "Describes an role.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "roleID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UUID"
          },
          "lastUpdatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/UUID"
          },
          "deletedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "deletedBy": {
            "$ref": "#/components/schemas/OptionalUUID"
          },
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "subjects": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "nullable": false
          },
          "policies": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/RolePolicy"
            },
            "nullable": false
          }
        },
        "required": [
          "roleID",
          "accountID",
          "createdOn",
          "createdBy",
          "lastUpdatedOn",
          "lastUpdatedBy",
          "name",
          "subjects",
          "policies"
        ]
      },
      "CreateRole": {
        "description": "Arguments to create a new role.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "subjects": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "nullable": false
          },
          "policies": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/RolePolicy"
            },
            "nullable": false
          }
        },
        "required": [
          "name",
          "subjects",
          "policies"
        ]
      },
      "UpdateRole": {
        "description": "Arguments to update an existing role.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "subjects": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          "policies": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/RolePolicy"
            }
          }
        },
        "required": [
          "name",
          "subjects",
          "policies"
        ]
      },
      "UserID": {
        "description": "ID of a user",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "MemberRole": {
        "description": "The roles associated between a user and an account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "roleId": {
            "$ref": "#/components/schemas/UUID"
          },
          "roleName": {
            "$ref": "#/components/schemas/schemas-Name"
          }
        }
      },
      "Member": {
        "description": "A user connected to an account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connectedTo": {
            "$ref": "#/components/schemas/AccountID"
          },
          "userID": {
            "$ref": "#/components/schemas/UserID"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "givenName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "familyName": {
            "$ref": "#/components/schemas/FamilyName"
          },
          "photoURL": {
            "$ref": "#/components/schemas/OptionalURL"
          },
          "roles": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/MemberRole"
            }
          }
        }
      },
      "Device": {
        "description": "Device model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "deviceID": {
            "$ref": "#/components/schemas/UUID"
          },
          "userID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UUID"
          },
          "lastSeenOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "disabledOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "disabledBy": {
            "$ref": "#/components/schemas/OptionalUUID"
          },
          "description": {
            "description": "Descriptive name of the device",
            "type": "string",
            "pattern": "^([\\w ]+)$",
            "example": "Chrome on Windows 10",
            "maxLength": 128,
            "readOnly": true
          }
        }
      },
      "ApplicationAccountMode": {
        "description": "The mode of the application's associated account:\n  * `0`: unspecified\n  * `1`: sandbox\n  * `2`: production\n",
        "type": "integer",
        "enum": [
          0,
          1,
          2
        ]
      },
      "ApplicationScope": {
        "description": "A scope, a permission that the application requests on another account",
        "type": "string",
        "enum": [
          "accounts.read",
          "accounts.write",
          "profile.read",
          "profile.write",
          "profile-enrichment.read",
          "connections.read",
          "connections.write",
          "documents.read",
          "documents.write",
          "bank-accounts.read",
          "bank-accounts.write",
          "payment-methods.read",
          "transfers.read",
          "transfers.write",
          "capabilities.read",
          "capabilities.write",
          "representatives.read",
          "representatives.write",
          "ping.read",
          "fed.read",
          "wallets.read",
          "cards.read",
          "cards.write",
          "analytics.read"
        ]
      },
      "AllowedApplicationScopes": {
        "description": "List of allowed scopes that can be requested on another account per their agreement with Moov.",
        "type": "array",
        "maxItems": 100,
        "items": {
          "$ref": "#/components/schemas/ApplicationScope"
        }
      },
      "Description": {
        "description": "A description for the item.",
        "type": "string",
        "pattern": "^([\\w ]+)$",
        "example": "Here lies a description of the item",
        "maxLength": 1024
      },
      "Application": {
        "description": "Application model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "applicationID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountMode": {
            "$ref": "#/components/schemas/ApplicationAccountMode"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UUID"
          },
          "disabledOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "disabledBy": {
            "$ref": "#/components/schemas/OptionalUUID"
          },
          "allowedScopes": {
            "$ref": "#/components/schemas/AllowedApplicationScopes"
          },
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          }
        }
      },
      "CreateApplication": {
        "description": "Fields required to create an application",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "allowedScopes": {
            "$ref": "#/components/schemas/AllowedApplicationScopes"
          }
        }
      },
      "ApplicationID": {
        "description": "ID of a specific Application",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "UpdateApplication": {
        "description": "Fields required to create an application",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          }
        }
      },
      "ApplicationKeyID": {
        "description": "ID of a specific Application Key",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "Origins": {
        "description": "List of domains that are allowed to use this application",
        "type": "array",
        "maxItems": 100,
        "items": {
          "$ref": "#/components/schemas/URL"
        }
      },
      "ClientID": {
        "description": "A randomly generated string of values that denotes the client_id for OAuth authorization",
        "type": "string",
        "format": "byte"
      },
      "ApplicationKey": {
        "description": "A key to use the application to access connections",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "appKeyID": {
            "$ref": "#/components/schemas/ApplicationKeyID"
          },
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "origins": {
            "$ref": "#/components/schemas/Origins"
          },
          "clientID": {
            "$ref": "#/components/schemas/ClientID"
          },
          "lastUsed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "CreateApplicationKey": {
        "description": "A key to use the application to access connections",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "origins": {
            "$ref": "#/components/schemas/Origins"
          }
        }
      },
      "ClientSecret": {
        "description": "A randomly generated string of values that denotes the client_secret for OAuth authorization",
        "type": "string",
        "format": "byte"
      },
      "CreatedApplicationKey": {
        "description": "A key to use the application to access connections",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "appKeyID": {
            "$ref": "#/components/schemas/ApplicationKeyID"
          },
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "origins": {
            "$ref": "#/components/schemas/Origins"
          },
          "clientID": {
            "$ref": "#/components/schemas/ClientID"
          },
          "clientSecret": {
            "$ref": "#/components/schemas/ClientSecret"
          },
          "lastUsed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "UpdateApplicationKey": {
        "description": "Fields to update on application key",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "origins": {
            "$ref": "#/components/schemas/Origins"
          }
        }
      },
      "ApplicationScopes": {
        "description": "List of scopes that this application will request access from another account",
        "type": "array",
        "maxItems": 100,
        "items": {
          "$ref": "#/components/schemas/ApplicationScope"
        }
      },
      "Connection": {
        "description": "Model that represents a connection to this account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connectedTo": {
            "$ref": "#/components/schemas/AccountID"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "displayName": {
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "enabled": {
            "description": "Indicates whether or not the connected account is enabled",
            "type": "boolean",
            "default": false
          },
          "scopes": {
            "$ref": "#/components/schemas/ApplicationScopes"
          }
        }
      },
      "Amount": {
        "description": "A representation of money containing an integer value and it's currency.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "currency": {
            "description": "A 3-letter ISO 4217 currency code",
            "type": "string",
            "pattern": "^[A-Za-z]+$",
            "example": "USD",
            "maxLength": 3
          },
          "value": {
            "description": "Quantity in the smallest unit of the specified currency. In USD this is cents, so $12.04 is 1204 and $0.99 would be 99.",
            "type": "integer",
            "format": "int64",
            "example": 1204
          }
        }
      },
      "Wallet": {
        "description": "A Moov wallet to store funds for transfers.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "walletID": {
            "$ref": "#/components/schemas/UUID"
          },
          "availableBalance": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "TransferStatus": {
        "type": "string",
        "description": "Current status of a transfer",
        "example": "pending",
        "enum": [
          "created",
          "pending",
          "completed",
          "failed",
          "reversed",
          "queued",
          "canceled"
        ]
      },
      "RefundStatus": {
        "type": "string",
        "enum": [
          "created",
          "pending",
          "completed",
          "failed"
        ]
      },
      "GetRefund": {
        "type": "object",
        "properties": {
          "refundID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "GetRefunds": {
        "type": "array",
        "description": "A list of refunds",
        "items": {
          "$ref": "#/components/schemas/GetRefund"
        }
      },
      "GetFacilitatorFee": {
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "markup": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetTransferBase": {
        "type": "object",
        "description": "Transfer details",
        "properties": {
          "transferID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdAt": {
            "description": "The `createdAt` key will be removed in June 2022. Please use `createdOn` instead.",
            "deprecated": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              }
            ]
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "status": {
            "$ref": "#/components/schemas/TransferStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "description": {
            "description": "A description of the transfer",
            "type": "string",
            "example": "Pay Instructor for May 15 Class",
            "maxLength": 128
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "refundedAmount": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "refunds": {
            "$ref": "#/components/schemas/GetRefunds"
          },
          "facilitatorFee": {
            "$ref": "#/components/schemas/GetFacilitatorFee"
          },
          "moovFee": {
            "type": "integer",
            "format": "int64"
          },
          "groupID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ]
          }
        }
      },
      "PaymentMethodType": {
        "description": "The payment method type that represents a payment rail and directionality",
        "type": "string",
        "enum": [
          "moov-wallet",
          "ach-debit-fund",
          "ach-debit-collect",
          "ach-credit-standard",
          "ach-credit-same-day",
          "rtp-credit",
          "card-payment"
        ]
      },
      "GetTransferPartialAccount": {
        "type": "object",
        "properties": {
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "displayName": {
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "BankAccountStatus": {
        "description": "The bank account status",
        "type": "string",
        "enum": [
          "new",
          "verified",
          "verificationFailed",
          "pending",
          "errored"
        ]
      },
      "HolderType": {
        "description": "The type of holder on a funding source",
        "type": "string",
        "enum": [
          "individual",
          "business"
        ]
      },
      "BankAccountType": {
        "description": "The bank account type",
        "type": "string",
        "enum": [
          "checking",
          "savings",
          "unknown"
        ]
      },
      "BankAccountResponse": {
        "description": "Describes a bank account on a Moov account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "bankAccountID": {
            "$ref": "#/components/schemas/UUID"
          },
          "fingerprint": {
            "example": "9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3",
            "type": "string",
            "maxLength": 100
          },
          "status": {
            "$ref": "#/components/schemas/BankAccountStatus"
          },
          "holderName": {
            "example": "Jules Jackson",
            "type": "string"
          },
          "holderType": {
            "$ref": "#/components/schemas/HolderType"
          },
          "bankName": {
            "example": "Chase Bank",
            "type": "string"
          },
          "bankAccountType": {
            "$ref": "#/components/schemas/BankAccountType"
          },
          "routingNumber": {
            "type": "string"
          },
          "lastFourAccountNumber": {
            "example": "7000",
            "type": "string"
          }
        }
      },
      "WalletResponse": {
        "description": "A Moov wallet to store funds for transfers.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "walletID": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "CardBrand": {
        "description": "The card brand",
        "type": "string",
        "enum": [
          "American Express",
          "Discover",
          "Mastercard",
          "Visa"
        ]
      },
      "CardType": {
        "description": "The type of the card",
        "type": "string",
        "enum": [
          "debit",
          "credit",
          "prepaid",
          "unknown"
        ]
      },
      "CardExpiration": {
        "description": "The expiration info of a card",
        "type": "object",
        "properties": {
          "month": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "01"
          },
          "year": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "21"
          }
        }
      },
      "CardVerificationResult": {
        "type": "string",
        "example": "match",
        "enum": [
          "noMatch",
          "match",
          "notChecked",
          "unavailable"
        ]
      },
      "CardVerifications": {
        "description": "The results of submitting cardholder data to a card network for verification",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cvv": {
            "$ref": "#/components/schemas/CardVerificationResult"
          },
          "addressLine1": {
            "$ref": "#/components/schemas/CardVerificationResult"
          },
          "postalCode": {
            "$ref": "#/components/schemas/CardVerificationResult"
          }
        }
      },
      "Card": {
        "description": "Describes a card on a Moov account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cardID": {
            "$ref": "#/components/schemas/UUID"
          },
          "fingerprint": {
            "example": "9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3",
            "maxLength": 100,
            "type": "string"
          },
          "brand": {
            "$ref": "#/components/schemas/CardBrand"
          },
          "cardType": {
            "$ref": "#/components/schemas/CardType"
          },
          "lastFourCardNumber": {
            "example": "1234",
            "type": "string"
          },
          "bin": {
            "example": "123456",
            "type": "string"
          },
          "expiration": {
            "$ref": "#/components/schemas/CardExpiration"
          },
          "holderName": {
            "example": "Jules Jackson",
            "type": "string"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "cardVerification": {
            "$ref": "#/components/schemas/CardVerifications"
          },
          "issuer": {
            "example": "GRINGOTTS BANK",
            "type": "string"
          },
          "issuerCountry": {
            "example": "US",
            "type": "string"
          }
        }
      },
      "TransactionSource": {
        "description": "Describes how the card transaction was initiated",
        "type": "string",
        "nullable": true,
        "enum": [
          "first-recurring",
          "recurring",
          "unscheduled"
        ]
      },
      "CreatedCardDetails": {
        "type": "object",
        "nullable": true,
        "properties": {
          "transactionSource": {
            "$ref": "#/components/schemas/TransactionSource"
          }
        }
      },
      "GetTransferPartialSourceDestination": {
        "type": "object",
        "properties": {
          "paymentMethodID": {
            "$ref": "#/components/schemas/UUID"
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "account": {
            "$ref": "#/components/schemas/GetTransferPartialAccount"
          },
          "bankAccount": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccountResponse"
              }
            ]
          },
          "wallet": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletResponse"
              }
            ]
          },
          "card": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "cardDetails": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedCardDetails"
              }
            ]
          }
        }
      },
      "GetTransferPartialSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetTransferPartialSourceDestination"
          },
          {
            "type": "object",
            "properties": {
              "transferID": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          }
        ]
      },
      "GetTransferPartial": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetTransferBase"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/GetTransferPartialSource"
              },
              "destination": {
                "$ref": "#/components/schemas/GetTransferPartialSourceDestination"
              }
            }
          }
        ]
      },
      "GetTransfers": {
        "type": "array",
        "description": "A list of transfers",
        "items": {
          "$ref": "#/components/schemas/GetTransferPartial"
        }
      },
      "WaitFor": {
        "type": "string",
        "enum": [
          "rail-response"
        ]
      },
      "CreateCardDetails": {
        "type": "object",
        "nullable": true,
        "properties": {
          "dynamicDescriptor": {
            "type": "string",
            "description": "An optional override of the default card statement descriptor for a single transfer.",
            "example": "WhlBdy *Yoga 11-12",
            "minLength": 4,
            "maxLength": 18
          },
          "transactionSource": {
            "$ref": "#/components/schemas/TransactionSource"
          }
        }
      },
      "CreateFacilitatorFee": {
        "type": "object",
        "description": "Total or markup fee",
        "properties": {
          "total": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          },
          "markup": {
            "nullable": true,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateTransfer": {
        "type": "object",
        "properties": {
          "source": {
            "type": "object",
            "description": "A payment method ID",
            "properties": {
              "transferID": {
                "$ref": "#/components/schemas/UUID"
              },
              "paymentMethodID": {
                "$ref": "#/components/schemas/UUID"
              },
              "cardDetails": {
                "$ref": "#/components/schemas/CreateCardDetails"
              }
            }
          },
          "destination": {
            "type": "object",
            "description": "A payment method ID",
            "properties": {
              "paymentMethodID": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "facilitatorFee": {
            "$ref": "#/components/schemas/CreateFacilitatorFee"
          },
          "description": {
            "description": "A description of the transfer",
            "type": "string",
            "example": "Pay Instructor for May 15 Class",
            "maxLength": 128
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "TransferID": {
        "description": "ID of Transfer",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "CreatedTransfer": {
        "title": "Asynchronous transfer response",
        "type": "object",
        "properties": {
          "transferID": {
            "$ref": "#/components/schemas/TransferID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "ACHStatus": {
        "description": "ACH status",
        "type": "string",
        "enum": [
          "initiated",
          "originated",
          "corrected",
          "returned",
          "completed"
        ]
      },
      "ACHException": {
        "type": "object",
        "nullable": true,
        "properties": {
          "code": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ACHDetails": {
        "type": "object",
        "description": "ACH specific details about the transaction",
        "nullable": true,
        "required": [
          "status",
          "traceNumber"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ACHStatus"
          },
          "traceNumber": {
            "type": "string",
            "example": "124782618117",
            "maxLength": 15
          },
          "return": {
            "$ref": "#/components/schemas/ACHException"
          },
          "correction": {
            "$ref": "#/components/schemas/ACHException"
          }
        }
      },
      "CardStatus": {
        "description": "Card status",
        "type": "string",
        "enum": [
          "initiated",
          "confirmed",
          "settled",
          "failed",
          "completed"
        ]
      },
      "CardDetails": {
        "type": "object",
        "nullable": true,
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CardStatus"
          },
          "reason": {
            "type": "string"
          },
          "transactionSource": {
            "$ref": "#/components/schemas/TransactionSource"
          }
        }
      },
      "GetTransferFullSourceDestination": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetTransferPartialSourceDestination"
          },
          {
            "type": "object",
            "properties": {
              "ach": {
                "nullable": true,
                "description": "The `ach` key will be removed in May 2022. Please use `achDetails` instead.",
                "deprecated": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ACHDetails"
                  }
                ]
              },
              "achDetails": {
                "$ref": "#/components/schemas/ACHDetails"
              },
              "cardDetails": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CardDetails"
                  }
                ]
              }
            }
          }
        ]
      },
      "GetTransferFullSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetTransferFullSourceDestination"
          },
          {
            "type": "object",
            "properties": {
              "transferID": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          }
        ]
      },
      "GetTransferFull": {
        "title": "Synchronous transfer response",
        "allOf": [
          {
            "$ref": "#/components/schemas/GetTransferBase"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/GetTransferFullSource"
              },
              "destination": {
                "$ref": "#/components/schemas/GetTransferFullSourceDestination"
              }
            }
          }
        ]
      },
      "TransferPostResponse": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreatedTransfer"
          },
          {
            "$ref": "#/components/schemas/GetTransferFull"
          }
        ]
      },
      "PatchTransfer": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "CreateTransferOptions": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "source": {
            "type": "object",
            "properties": {
              "accountID": {
                "$ref": "#/components/schemas/UUID"
              },
              "paymentMethodID": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "accountID": {
                "$ref": "#/components/schemas/UUID"
              },
              "paymentMethodID": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "BasicPaymentMethod": {
        "type": "object",
        "properties": {
          "paymentMethodID": {
            "$ref": "#/components/schemas/UUID"
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodType"
          }
        }
      },
      "PaymentMethodWallet": {
        "title": "Wallet",
        "description": "A method of moving money that is a Moov wallet",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicPaymentMethod"
          },
          {
            "type": "object",
            "properties": {
              "wallet": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WalletResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentMethodBankAccount": {
        "title": "Bank account",
        "description": "A method of moving money that is a bank account",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicPaymentMethod"
          },
          {
            "type": "object",
            "properties": {
              "bankAccount": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentMethodCard": {
        "title": "Card",
        "description": "A method of moving money that is a credit or debit card",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicPaymentMethod"
          },
          {
            "type": "object",
            "properties": {
              "card": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Card"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentMethod": {
        "description": "A method of moving money",
        "type": "object",
        "additionalProperties": false,
        "oneOf": [
          {
            "$ref": "#/components/schemas/PaymentMethodWallet"
          },
          {
            "$ref": "#/components/schemas/PaymentMethodBankAccount"
          },
          {
            "$ref": "#/components/schemas/PaymentMethodCard"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodType",
          "mapping": {
            "moov-wallet": "#/components/schemas/PaymentMethodWallet",
            "ach-debit-fund": "#/components/schemas/PaymentMethodBankAccount",
            "ach-debit-collect": "#/components/schemas/PaymentMethodBankAccount",
            "ach-credit-standard": "#/components/schemas/PaymentMethodBankAccount",
            "ach-credit-same-day": "#/components/schemas/PaymentMethodBankAccount",
            "rtp-credit": "#/components/schemas/PaymentMethodBankAccount",
            "card-payment": "#/components/schemas/PaymentMethodCard"
          }
        }
      },
      "CreatedTransferOptions": {
        "type": "object",
        "properties": {
          "sourceOptions": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentMethod"
                },
                {
                  "type": "object",
                  "example": {
                    "paymentMethodID": "2b42ad2a-7586-4e55-a268-10d585186c27"
                  }
                }
              ]
            }
          },
          "destinationOptions": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentMethod"
                },
                {
                  "type": "object",
                  "example": {
                    "paymentMethodID": "8485a2ce-c9b0-4d49-bfa1-60e88a79ce31"
                  }
                }
              ]
            }
          }
        }
      },
      "CreatedRefund": {
        "type": "object",
        "properties": {
          "refundID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "BankAccounts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/BankAccountResponse"
        }
      },
      "BankAccountIntegration": {
        "title": "Bank account",
        "description": "Describes the account to link to the Moov account",
        "type": "object",
        "additionalProperties": false,
        "nullable": true,
        "properties": {
          "holderName": {
            "example": "Jules Jackson",
            "type": "string"
          },
          "holderType": {
            "$ref": "#/components/schemas/HolderType"
          },
          "accountNumber": {
            "example": "0004321567000",
            "type": "string"
          },
          "bankAccountType": {
            "$ref": "#/components/schemas/BankAccountType"
          },
          "routingNumber": {
            "example": "123456789",
            "type": "string"
          }
        },
        "required": [
          "holderName",
          "holderType",
          "accountNumber",
          "accountType",
          "routingNumber"
        ]
      },
      "BankAccount": {
        "title": "Bank account",
        "description": "Describes the account to link to the Moov account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "account": {
            "$ref": "#/components/schemas/BankAccountIntegration"
          }
        }
      },
      "PlaidIntegration": {
        "description": "The details of a Plaid processor integration for a linked funding source. <br><br> `sandbox` - When linking a bank account to a `sandbox` account using a Plaid processor token a default bank account response will be used. The following default data will be used to generate the bank account in this flow:\n```\n  RoutingNumber: \"011401533\",\n  AccountNumber: \"1111222233330000\",\n  AccountType:   \"checking\",\n  Mask:          \"0000\"\n```\n",
        "type": "object",
        "nullable": true,
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "Plaid": {
        "title": "Plaid Processor",
        "description": "Describes the account to link to the Moov account using a Plaid processor token.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "plaid": {
            "$ref": "#/components/schemas/PlaidIntegration"
          }
        }
      },
      "PlaidLinkIntegration": {
        "description": "This is used by Moov.js with a Plaid reseller relationship. The details of a Plaid link integration for a linked funding source. <br><br> `sandbox` - (requires Plaid Reseller setup with Moov) When linking a bank account to a `sandbox` account using a Plaid public token it will utilize Plaid's sandbox environment. The Plaid public token provided must be generated from Plaid's sandbox environment. Please see <a href=\"https://plaid.com/docs/api/sandbox/#sandboxpublic_tokencreate\" target=\"_blank\">Plaid's sandbox documentation</a> for more details.",
        "type": "object",
        "nullable": true,
        "properties": {
          "publicToken": {
            "type": "string"
          }
        }
      },
      "PlaidLink": {
        "title": "Plaid Link",
        "description": "This is used by Moov.js with a Plaid reseller relationship. Describes the account to link to the Moov account using a Plaid using a Plaid Public Token.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "plaidLink": {
            "$ref": "#/components/schemas/PlaidLinkIntegration"
          }
        }
      },
      "MXAuthorizationCode": {
        "description": "The authorization code of a MX account which allows a processor to retrieve a linked payment account. <br><br> `sandbox` - When linking a bank account to a `sandbox` account using a MX authorization code it will utilize MX's sandbox environment. The MX authorization code provided must be generated from MX's sandbox environment.",
        "type": "object",
        "nullable": true,
        "properties": {
          "authorizationCode": {
            "type": "string"
          }
        }
      },
      "MX": {
        "title": "MX Processor",
        "description": "Describes the account to link to the Moov account using a MX processor token. <br><br> `sandbox` - When linking a bank account to a `sandbox` account using an MX authorization token a default bank account routing number will be used. The following default data will be used to generate the bank account in this flow:\n```\n  RoutingNumber: \"123456780\",\n  BankName: \"Gringotts Bank\"\n```\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "mx": {
            "$ref": "#/components/schemas/MXAuthorizationCode"
          }
        }
      },
      "BankAccountPayload": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/BankAccount"
          },
          {
            "$ref": "#/components/schemas/Plaid"
          },
          {
            "$ref": "#/components/schemas/PlaidLink"
          },
          {
            "$ref": "#/components/schemas/MX"
          }
        ]
      },
      "CompleteMicroDepositsRequest": {
        "description": "Request to complete the micro-deposit verification workflow.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "amounts": {
            "description": "Two positive integers, in cents, equal to the values of the micro-deposits sent to the bank account.",
            "example": [
              18,
              21
            ],
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "MicroDepositStatus": {
        "description": "The micro-deposit status",
        "type": "string",
        "enum": [
          "verified"
        ]
      },
      "CompleteMicroDepositsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "$ref": "#/components/schemas/MicroDepositStatus"
          }
        }
      },
      "Cards": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Card"
        }
      },
      "schemas-WaitFor": {
        "type": "string",
        "enum": [
          "payment-method"
        ]
      },
      "CardRequest": {
        "description": "Describes the card to link to the Moov account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cardNumber": {
            "type": "string"
          },
          "expiration": {
            "$ref": "#/components/schemas/CardExpiration"
          },
          "cardCvv": {
            "type": "string",
            "maxLength": 4,
            "minLength": 3,
            "example": "0123"
          },
          "holderName": {
            "example": "Jules Jackson",
            "type": "string"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "AuthorizedUser": {
        "description": "Fields to identify a human",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "birthDate": {
            "$ref": "#/components/schemas/BirthDate"
          }
        }
      },
      "AuthorizationSpendDuration": {
        "description": "Unit of authorization limit control",
        "type": "string",
        "enum": [
          "transaction"
        ]
      },
      "AuthorizationSpendLimitControl": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Maximum value in cents allowed per duration",
            "example": 10000
          },
          "duration": {
            "$ref": "#/components/schemas/AuthorizationSpendDuration"
          }
        }
      },
      "AuthorizationControls": {
        "type": "object",
        "properties": {
          "spendLimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationSpendLimitControl"
            },
            "example": [
              {
                "amount": 10000,
                "duration": "transaction"
              }
            ]
          }
        }
      },
      "IssuedCardState": {
        "description": "Status of a Moov issued card",
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "pending-verification",
          "closed"
        ]
      },
      "IssuedCardType": {
        "description": "Type of a Moov issued card",
        "type": "string",
        "enum": [
          "single-use"
        ]
      },
      "IssuedCard": {
        "properties": {
          "issuedCardID": {
            "$ref": "#/components/schemas/UUID"
          },
          "brand": {
            "$ref": "#/components/schemas/CardBrand"
          },
          "lastFourCardNumber": {
            "example": "1234",
            "type": "string"
          },
          "expiration": {
            "$ref": "#/components/schemas/CardExpiration"
          },
          "authorizedUser": {
            "$ref": "#/components/schemas/AuthorizedUser"
          },
          "memo": {
            "type": "string",
            "description": "Optional descriptive name"
          },
          "authorizationControls": {
            "$ref": "#/components/schemas/AuthorizationControls"
          },
          "fundingWalletID": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/IssuedCardState"
          },
          "type": {
            "$ref": "#/components/schemas/IssuedCardType"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "IssuedCards": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/IssuedCard"
        }
      },
      "RequestCard": {
        "properties": {
          "fundingWalletID": {
            "type": "string"
          },
          "authorizedUser": {
            "$ref": "#/components/schemas/AuthorizedUser"
          },
          "type": {
            "$ref": "#/components/schemas/IssuedCardType"
          },
          "memo": {
            "type": "string",
            "description": "Optional descriptive name"
          },
          "authorizationControls": {
            "$ref": "#/components/schemas/AuthorizationControls"
          }
        }
      },
      "UpdateIssuedCard": {
        "properties": {
          "state": {
            "$ref": "#/components/schemas/IssuedCardState"
          },
          "memo": {
            "type": "string",
            "description": "Optional descriptive name"
          },
          "authorizationControls": {
            "$ref": "#/components/schemas/AuthorizationControls"
          },
          "authorizedUser": {
            "$ref": "#/components/schemas/AuthorizedUser"
          }
        }
      },
      "PCICardDetails": {
        "properties": {
          "pan": {
            "type": "string",
            "minLength": 16,
            "maxLength": 19,
            "example": "1234560000007890"
          },
          "cvv": {
            "type": "string",
            "minLength": 3,
            "maxLength": 4,
            "example": "123"
          },
          "expiration": {
            "$ref": "#/components/schemas/CardExpiration"
          }
        }
      },
      "FullIssuedCard": {
        "description": "Issued card with PAN, CVV, and expiration",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IssuedCard"
          },
          {
            "$ref": "#/components/schemas/PCICardDetails"
          }
        ]
      },
      "IssuedCardTransactionType": {
        "description": "Type of Transaction",
        "type": "string",
        "enum": [
          "purchase",
          "refund"
        ]
      },
      "IssuedCardTransactionStatus": {
        "description": "Status of Transaction",
        "type": "string",
        "enum": [
          "pending",
          "completed",
          "declined",
          "voided"
        ]
      },
      "IssuedCardTransactionMerchant": {
        "properties": {
          "networkID": {
            "description": "External identifier used to identify the merchant with the card brand",
            "type": "string",
            "example": "1234567890"
          },
          "name": {
            "description": "Name of merchant or company",
            "type": "string",
            "example": "Whole Body Fitness"
          },
          "city": {
            "description": "Location of merchant",
            "type": "string",
            "example": "San Francisco"
          },
          "country": {
            "description": "Two-letter code of the merchant country",
            "type": "string",
            "example": "US"
          },
          "postalCode": {
            "description": "Five digit postal code",
            "type": "string",
            "example": "94107"
          },
          "state": {
            "description": "Two-letter code of merchant state",
            "type": "string",
            "example": "CA"
          },
          "mcc": {
            "description": "Merchant category code",
            "type": "string",
            "example": "7298"
          }
        }
      },
      "IssuedCardTransaction": {
        "properties": {
          "transactionID": {
            "$ref": "#/components/schemas/UUID"
          },
          "issuingCardID": {
            "$ref": "#/components/schemas/UUID"
          },
          "fundingWalletID": {
            "$ref": "#/components/schemas/UUID"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "type": {
            "$ref": "#/components/schemas/IssuedCardTransactionType"
          },
          "status": {
            "$ref": "#/components/schemas/IssuedCardTransactionStatus"
          },
          "merchantData": {
            "$ref": "#/components/schemas/IssuedCardTransactionMerchant"
          },
          "transactionDateTime": {
            "$ref": "#/components/schemas/DateTime"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "IssuedCardTransactions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/IssuedCardTransaction"
        }
      },
      "Transfer": {
        "description": "Details about transfer",
        "type": "object",
        "properties": {
          "transferID": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "Dispute": {
        "description": "Details about card dispute",
        "type": "object",
        "properties": {
          "disputeID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "networkReasonCode": {
            "type": "string"
          },
          "transfer": {
            "$ref": "#/components/schemas/Transfer"
          }
        }
      },
      "PaymentMethods": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PaymentMethod"
        }
      },
      "CapabilityStatus": {
        "description": "The status of the capability requested for an account",
        "type": "string",
        "enum": [
          "enabled",
          "disabled",
          "pending"
        ]
      },
      "RequirementID": {
        "description": "The unique ID of what the requirement is asking to be filled out.",
        "type": "string",
        "enum": [
          "account.tos-acceptance",
          "individual.mobile",
          "individual.email",
          "individual.email-or-mobile",
          "individual.firstname",
          "individual.lastname",
          "individual.address",
          "individual.ssn-last4",
          "individual.ssn",
          "individual.birthdate",
          "business.legalname",
          "business.description-or-website",
          "business.entity-type",
          "business.dba",
          "business.ein",
          "business.address",
          "business.phone",
          "business.admins",
          "business.controllers",
          "business.owners",
          "business.classification",
          "business.industry-code-mcc",
          "business.indicate-owners-provided",
          "bank-accounts.name",
          "bank-accounts.routing-number",
          "bank-accounts.account-number",
          "representative.{rep-uuid}.mobile",
          "representative.{rep-uuid}.email",
          "representative.{rep-uuid}.email-or-mobile",
          "representative.{rep-uuid}.firstname",
          "representative.{rep-uuid}.lastname",
          "representative.{rep-uuid}.address",
          "representative.{rep-uuid}.ssn-last4",
          "representative.{rep-uuid}.ssn",
          "representative.{rep-uuid}.birthdate",
          "representative.{rep-uuid}.job-title",
          "representative.{rep-uuid}.is-controller",
          "representative.{rep-uuid}.is-owner",
          "representative.{rep-uuid}.ownership",
          "document.{doc-uuid}"
        ]
      },
      "RequirementErrorCode": {
        "type": "string",
        "enum": [
          "invalid-value",
          "failed-automatic-verification",
          "failed-other",
          "invalid-address",
          "address-restricted",
          "tax-id-mismatch",
          "document-id-mismatch",
          "document-date-of-birth-mismatch",
          "document-name-mismatch",
          "document-address.mismatch",
          "document-number-mismatch",
          "document-incomplete",
          "document-failed-risk",
          "document-illegible",
          "document-unsupported",
          "document-not-uploaded",
          "document-corrupt",
          "document-expired"
        ]
      },
      "RequirementError": {
        "description": "Describes an error fulfilling a Requirement",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "requirement": {
            "$ref": "#/components/schemas/RequirementID"
          },
          "errorCode": {
            "$ref": "#/components/schemas/RequirementErrorCode"
          }
        }
      },
      "Requirement": {
        "description": "Represents individual and business data necessary to facilitate the enabling of a capability for an account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "currentlyDue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequirementID"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequirementError"
            }
          }
        }
      },
      "Capability": {
        "description": "Describes an action or set of actions that an account is permitted to perform",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "capability": {
            "$ref": "#/components/schemas/CapabilityID"
          },
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "status": {
            "$ref": "#/components/schemas/CapabilityStatus"
          },
          "requirements": {
            "$ref": "#/components/schemas/Requirement"
          },
          "disabledReason": {
            "description": "If status is `disabled`, the reason this capability was disabled",
            "type": "string"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "disabledOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          }
        },
        "required": [
          "capability",
          "status",
          "createdOn",
          "updatedOn"
        ]
      },
      "AddCapabilityRequest": {
        "description": "Request to add a capability to an account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityID"
            }
          }
        },
        "required": [
          "capabilities"
        ]
      },
      "CapabilityRequestError": {
        "description": "Error response for http requests that failed",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "error": {
            "example": "cannot request capabilities for an account with failed verification",
            "type": "string"
          }
        }
      },
      "Industry": {
        "description": "Describes an industry and its related codes",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string",
            "example": "AC, Refrigeration Repair"
          },
          "naics": {
            "type": "string",
            "description": "North American Industry Classification System",
            "example": "811412",
            "maxLength": 6
          },
          "sic": {
            "type": "string",
            "description": "Standard Industrial Classification",
            "example": "7623",
            "maxLength": 4
          },
          "mcc": {
            "type": "string",
            "description": "Merchant Category Code",
            "example": "7623",
            "maxLength": 4
          }
        }
      },
      "Industries": {
        "description": "A list of industries and their MCC/SIC/NAICS codes",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "industries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Industry"
            }
          }
        }
      },
      "Rail": {
        "description": "A supported payment rail",
        "type": "string",
        "enum": [
          "ach",
          "wire"
        ]
      },
      "AchLocation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "address": {
            "type": "string",
            "example": "123 Main Street",
            "maxLength": 32
          },
          "city": {
            "type": "string",
            "example": "Boulder",
            "maxLength": 24
          },
          "state": {
            "type": "string",
            "example": "Colorado",
            "maxLength": 24
          },
          "postalCode": {
            "type": "string",
            "example": "80301",
            "maxLength": 5
          },
          "postalCodeExtension": {
            "type": "string",
            "example": "0000",
            "maxLength": 4
          }
        }
      },
      "AchParticipant": {
        "description": "Financial institution information regarding an ACH participant",
        "type": "object",
        "properties": {
          "routingNumber": {
            "example": "123456789",
            "type": "string",
            "maxLength": 9
          },
          "officeCode": {
            "example": "0",
            "type": "string"
          },
          "servicingFRBNumber": {
            "example": "123456789",
            "type": "string"
          },
          "recordTypeCode": {
            "example": "1",
            "type": "string"
          },
          "revised": {
            "example": "041921",
            "type": "string"
          },
          "newRoutingNumber": {
            "example": "987654321",
            "type": "string",
            "maxLength": 9
          },
          "customerName": {
            "example": "Main Street Bank",
            "type": "string"
          },
          "phoneNumber": {
            "example": "123-456-7789",
            "type": "string"
          },
          "statusCode": {
            "example": "1",
            "type": "string"
          },
          "viewCode": {
            "example": "1",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/AchLocation"
          }
        }
      },
      "WireLocation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "city": {
            "type": "string",
            "example": "Boulder",
            "maxLength": 24
          },
          "state": {
            "type": "string",
            "example": "Colorado",
            "maxLength": 24
          }
        }
      },
      "WireParticipant": {
        "description": "Financial institution information regarding a wire participant",
        "type": "object",
        "properties": {
          "routingNumber": {
            "example": "123456789",
            "type": "string",
            "maxLength": 9
          },
          "telegraphicName": {
            "example": "MN STR BNK",
            "type": "string"
          },
          "customerName": {
            "example": "Main Street Bank",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/WireLocation"
          },
          "fundsTransferStatus": {
            "example": "Y",
            "type": "string"
          },
          "fundsSettlementOnlyStatus": {
            "example": " ",
            "type": "string"
          },
          "bookEntrySecuritiesTransferStatus": {
            "example": "Y",
            "type": "string"
          },
          "date": {
            "example": "20000222",
            "type": "string"
          }
        }
      },
      "FinancialInstitutions": {
        "description": "List of all of the financial institutions found from a search",
        "type": "object",
        "properties": {
          "achParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AchParticipant"
            }
          },
          "wireParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WireParticipant"
            }
          }
        }
      },
      "EnrichmentAddress": {
        "description": "Describes a suggested address",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "addressLine1": {
            "type": "string",
            "example": "123 Main St"
          },
          "addressLine2": {
            "type": "string",
            "example": "Apt"
          },
          "city": {
            "type": "string",
            "example": "Honolulu"
          },
          "stateOrProvince": {
            "type": "string",
            "example": "HI"
          },
          "postalCode": {
            "type": "string",
            "example": "96818"
          },
          "entries": {
            "type": "integer",
            "example": 75
          }
        }
      },
      "EnrichedIndividual": {
        "description": "Describes a person",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "EnrichedIndustryCodes": {
        "description": "Describes industry specific identifiers",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "naics": {
            "type": "string",
            "example": "480184"
          },
          "sic": {
            "type": "string",
            "example": "3750"
          }
        }
      },
      "EnrichedBusiness": {
        "description": "Describes a company",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "legalBusinessName": {
            "type": "string",
            "example": "Moov Financial Inc"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          },
          "industryCodes": {
            "$ref": "#/components/schemas/EnrichedIndustryCodes"
          },
          "website": {
            "type": "string",
            "example": "moov.io"
          }
        }
      },
      "EnrichmentProfile": {
        "description": "Describes an enriched profile",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "individual": {
            "$ref": "#/components/schemas/EnrichedIndividual"
          },
          "business": {
            "$ref": "#/components/schemas/EnrichedBusiness"
          }
        }
      },
      "Status": {
        "description": "The status of the resource.",
        "type": "string",
        "enum": [
          "enabled",
          "disabled"
        ]
      },
      "EnabledEventTypes": {
        "description": "The list of event types that the webhook is subscribed to.\n`[\"*\"]` indiciates the webhook is subscribed to all current and future event types.\n",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "AllowlistedOrganizationIDs": {
        "description": "The allow list of organizationIDs that is enabled on a webhook.\nIn other words, the webhook will only be triggered by events related to allow listed organizationIDs.\n`[\"*\"]` indiciates all organizations are allow listed.\n",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "Webhook": {
        "properties": {
          "webhookID": {
            "description": "Unique identifier for this webhook.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ]
          },
          "url": {
            "description": "The URL of the webhook endpoint. Event payloads will be delivered to this URL.",
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "An optional description of what the webhook is used for."
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "eventTypes": {
            "$ref": "#/components/schemas/EnabledEventTypes"
          },
          "organizations": {
            "$ref": "#/components/schemas/AllowlistedOrganizationIDs"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "lastUsedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          }
        },
        "required": [
          "webhookID",
          "url",
          "status",
          "eventTypes",
          "organizations",
          "createdOn",
          "updatedOn"
        ]
      },
      "CreateWebhook": {
        "properties": {
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "eventTypes": {
            "$ref": "#/components/schemas/EnabledEventTypes"
          },
          "organizations": {
            "$ref": "#/components/schemas/AllowlistedOrganizationIDs"
          }
        },
        "required": [
          "url",
          "status",
          "eventTypes",
          "organizations"
        ]
      },
      "ValidationError": {
        "description": "Descriptive reason for failing validation",
        "type": "string",
        "nullable": true,
        "readOnly": true
      },
      "WebhookErrors": {
        "description": "Request to create a webhook",
        "type": "object",
        "properties": {
          "url": {
            "$ref": "#/components/schemas/ValidationError"
          },
          "status": {
            "$ref": "#/components/schemas/ValidationError"
          },
          "eventTypes": {
            "$ref": "#/components/schemas/ValidationError"
          },
          "organizations": {
            "$ref": "#/components/schemas/ValidationError"
          }
        }
      },
      "UpdateWebhook": {
        "properties": {
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "eventTypes": {
            "$ref": "#/components/schemas/EnabledEventTypes"
          },
          "organizations": {
            "$ref": "#/components/schemas/AllowlistedOrganizationIDs"
          }
        },
        "required": [
          "url",
          "status",
          "eventTypes",
          "organizations"
        ]
      },
      "PingResponse": {
        "properties": {
          "webhook": {
            "$ref": "#/components/schemas/Webhook"
          },
          "requestBodySent": {
            "type": "object",
            "description": "The request body sent to the target URL. It will contain an event type of `event.test` and an empty (null) data payload."
          },
          "responseStatusCode": {
            "type": "integer",
            "description": "The response status code after sending a ping event to the URL."
          }
        }
      },
      "WebhookSecretKey": {
        "description": "Webhook secret key used to verify that a request came from Moov",
        "properties": {
          "secret": {
            "type": "string",
            "nullable": false
          }
        },
        "required": [
          "secret"
        ]
      },
      "EventType": {
        "type": "string",
        "description": "The event type a webhook can subscribe to.",
        "enum": [
          "*",
          "customer.created",
          "customer.updated",
          "customer.deleted",
          "customer.account.created",
          "customer.account.updated",
          "customer.document.created",
          "transfer.created",
          "transfer.canceled",
          "transfer.updated",
          "transfer.notice_of_change"
        ]
      },
      "EventTypeObject": {
        "description": "The type of event that Moov can generate.",
        "properties": {
          "eventTypeID": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "eventTypeID",
          "type",
          "description"
        ]
      },
      "TimeRange": {
        "description": "Specify a time range between two timestamps and then the interval duration for each result in the specific `tz` timezone",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "$ref": "#/components/schemas/DateTime"
          },
          "to": {
            "$ref": "#/components/schemas/DateTime"
          },
          "every": {
            "$ref": "#/components/schemas/DateTime"
          },
          "tz": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "TransferSum": {
        "description": "Sum of all transfers between two timestamps",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "$ref": "#/components/schemas/DateTime"
          },
          "stop": {
            "$ref": "#/components/schemas/DateTime"
          },
          "amount": {
            "type": "integer"
          }
        }
      },
      "LimitedTimeRange": {
        "description": "Return `count` number of results within time range between two timestamps and then the interval duration for each result in the specific `tz` timezone",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "$ref": "#/components/schemas/DateTime"
          },
          "to": {
            "$ref": "#/components/schemas/DateTime"
          },
          "every": {
            "type": "string",
            "format": "timezone"
          },
          "tz": {
            "type": "string",
            "format": "timezone"
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "SpecificTransfer": {
        "description": "Return a specific transfer result for the time frame between two timestamps",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "$ref": "#/components/schemas/DateTime"
          },
          "stop": {
            "$ref": "#/components/schemas/DateTime"
          },
          "transfer_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "created_on": {
            "$ref": "#/components/schemas/DateTime"
          },
          "amount": {
            "type": "integer"
          }
        }
      },
      "TransferStatusCount": {
        "description": "Count all unique transfer statuses between two timestamps",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "$ref": "#/components/schemas/DateTime"
          },
          "stop": {
            "$ref": "#/components/schemas/DateTime"
          },
          "status": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "ProfilesCreatedInterval": {
        "description": "Count all profile types between two timestamps",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "$ref": "#/components/schemas/DateTime"
          },
          "stop": {
            "$ref": "#/components/schemas/DateTime"
          },
          "profile": {
            "type": "string",
            "format": "timezone"
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "AccountUpdated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "TransferPaymentMethod": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          },
          "paymentMethodID": {
            "type": "string",
            "description": "ID of the payment method"
          }
        }
      }
    },
    "securitySchemes": {
      "AccessToken": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth2/authorize",
            "tokenUrl": "/oauth2/token",
            "scopes": {
              "profile.read": "Grants access to read a profile"
            }
          }
        }
      },
      "OAuth2Credentials": {
        "description": "Basic authentication per the OAuth 2.0 specification for authenticating key usage per \n[section 2.3.1 of RFC 6749](https://tools.ietf.org/html/rfc6749#section-2.3.1). \nUsername would be the `client_id` and password would be the `client_secret`. If not \nauthorized a 401 code will be returned. This authentication method is optional but preferred \nto passing the `client_id ` and `client_secret` in the body of the request.\n",
        "type": "http",
        "scheme": "basic"
      },
      "GatewayAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT that comes from the gateway that validates against the gateways public RSA key"
      }
    },
    "responses": {
      "Empty": {
        "description": "Empty response for unauthorized or any other returned http status code",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "",
              "maxLength": 0,
              "pattern": "\\s{0}"
            }
          }
        }
      },
      "NoContent": {
        "description": "Successful empty response for unauthorized or any other returned http status code",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "",
              "maxLength": 0,
              "pattern": "\\s{0}"
            }
          }
        }
      },
      "RateLimited": {
        "description": "Request was refused due to rate limiting",
        "headers": {
          "X-Retry-In": {
            "description": "How long to wait until able to retry the request",
            "schema": {
              "type": "string",
              "format": "duration",
              "example": "46.748934ms"
            }
          }
        },
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "",
              "maxLength": 0,
              "pattern": "\\s{0}"
            }
          }
        }
      },
      "Disabled": {
        "description": "Successfully disabled resource",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "",
              "maxLength": 0,
              "pattern": "\\s{0}"
            }
          }
        }
      },
      "responses-Empty": {
        "description": "Empty response for unauthorized or any other returned http status code",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "",
              "maxLength": 0,
              "pattern": "//i"
            }
          }
        }
      },
      "TransferSums": {
        "description": "Sum of all transfers during each interval",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/TransferSum"
              }
            }
          }
        }
      },
      "SpecificTransfers": {
        "description": "Return specific transfer IDs and amounts of the largest or smallest transfers per interval",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/SpecificTransfer"
              }
            }
          }
        }
      },
      "TransferStatusCounts": {
        "description": "Counts the statuses transfers are in",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/TransferStatusCount"
              }
            }
          }
        }
      },
      "ProfilesCreated": {
        "description": "Profiles created during each interval",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/ProfilesCreatedInterval"
              }
            }
          }
        }
      }
    },
    "parameters": {
      "ProviderID": {
        "in": "path",
        "name": "providerID",
        "required": true,
        "description": "Name of the Provider to use",
        "schema": {
          "type": "string",
          "example": "my-oidc-provider",
          "maxLength": 20,
          "pattern": "^[a-z0-9-]+$"
        }
      },
      "XAccountID": {
        "description": "ID of the account",
        "explode": false,
        "in": "header",
        "name": "X-Account-ID",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/AccountID"
        },
        "style": "simple"
      },
      "AccountID": {
        "description": "ID of the account",
        "explode": false,
        "in": "path",
        "name": "accountID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/AccountID"
        },
        "style": "simple"
      },
      "RepresentativeID": {
        "description": "ID of the representative",
        "explode": false,
        "in": "path",
        "name": "representativeID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "ApplicationID": {
        "description": "ID of the application",
        "explode": false,
        "in": "path",
        "name": "applicationID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ApplicationID"
        },
        "style": "simple"
      },
      "ApplicationKeyID": {
        "description": "ID of the application key",
        "explode": false,
        "in": "path",
        "name": "applicationKeyID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ApplicationKeyID"
        },
        "style": "simple"
      },
      "parameters-AccountID": {
        "description": "ID of a connected account",
        "in": "query",
        "name": "accountID",
        "schema": {
          "$ref": "#/components/schemas/AccountID"
        }
      },
      "TransferID": {
        "description": "ID of the Transfer",
        "explode": false,
        "in": "path",
        "name": "transferID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransferID"
        },
        "style": "simple"
      },
      "RefundID": {
        "description": "ID of the refund",
        "explode": false,
        "in": "path",
        "name": "refundID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "BankAccountID": {
        "description": "ID of the bank account",
        "explode": false,
        "in": "path",
        "name": "bankAccountID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "CardID": {
        "description": "ID of the card",
        "explode": false,
        "in": "path",
        "name": "cardID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "PaymentMethodID": {
        "description": "ID of the payment method",
        "explode": false,
        "in": "path",
        "name": "paymentMethodID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "CapabilityID": {
        "description": "The requested capability identifier",
        "explode": false,
        "in": "path",
        "name": "capabilityID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CapabilityID"
        },
        "style": "simple"
      },
      "Rail": {
        "description": "Payment rail to search on",
        "explode": false,
        "in": "path",
        "name": "rail",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Rail"
        },
        "style": "simple"
      },
      "UniqueID": {
        "description": "Any unique ID associated with an account such as AccountID, RepresentativeID, Routing Number, or User ID",
        "explode": false,
        "in": "path",
        "name": "uniqueID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "style": "simple"
      },
      "WebhookID": {
        "name": "webhookID",
        "in": "path",
        "required": true,
        "description": "ID of the webhook",
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      }
    },
    "examples": {
      "getTransfers": {
        "value": [
          {
            "transferID": "25d0d56e-334e-4aa9-adba-54f0b85d4f82",
            "createdAt": "2021-09-24T14:15:22Z",
            "createdOn": "2021-09-24T14:15:22Z",
            "status": "pending",
            "source": {
              "paymentMethodID": "2b42ad2a-7586-4e55-a268-10d585186c27",
              "paymentMethodType": "ach-debit-fund",
              "bankAccount": {
                "bankAccountID": "1c4295fb-b4cd-42a0-8631-79354fba5ffc",
                "fingerprint": "9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3",
                "status": "verified",
                "holderName": "Whole Body Fitness",
                "holderType": "business",
                "bankName": "Chase Bank",
                "bankAccountType": "checking",
                "routingNumber": "599399015",
                "lastFourAccountNumber": "7000"
              },
              "account": {
                "accountID": "3dfff852-927d-47e8-822c-2fffc57ff6b9",
                "email": "info@wholebodyfitness.com",
                "displayName": "Whole Body Fitness"
              },
              "cardDetails": {
                "transactionSource": "recurring"
              }
            },
            "destination": {
              "paymentMethodID": "8485a2ce-c9b0-4d49-bfa1-60e88a79ce31",
              "paymentMethodType": "moov-wallet",
              "wallet": {
                "walletID": "5f8549fb-eb23-4879-b8dd-138f848e8cd5"
              },
              "account": {
                "accountID": "7c99ddb3-a4f1-4474-97b7-6d8fa07baa07",
                "email": "jules.jackson@example.com",
                "displayName": "Jules Jackson"
              }
            },
            "amount": {
              "currency": "USD",
              "value": 1204
            },
            "description": "Pay Instructor for May 15 Class",
            "metadata": {
              "property1": "string",
              "property2": "string"
            }
          }
        ]
      },
      "getTransfer": {
        "value": {
          "transferID": "25d0d56e-334e-4aa9-adba-54f0b85d4f82",
          "createdAt": "2021-09-24T14:15:22Z",
          "createdOn": "2021-09-24T14:15:22Z",
          "status": "pending",
          "source": {
            "paymentMethodID": "2b42ad2a-7586-4e55-a268-10d585186c27",
            "paymentMethodType": "ach-debit-fund",
            "bankAccount": {
              "bankAccountID": "1c4295fb-b4cd-42a0-8631-79354fba5ffc",
              "fingerprint": "9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3",
              "status": "verified",
              "holderName": "Whole Body Fitness",
              "holderType": "business",
              "bankName": "Chase Bank",
              "bankAccountType": "checking",
              "routingNumber": "599399015",
              "lastFourAccountNumber": "7000"
            },
            "ach": {
              "status": "initiated",
              "traceNumber": "124782618117",
              "return": {
                "code": "R01",
                "reason": "Insufficient Funds",
                "description": "Available balance is not sufficient to cover the dollar value of the debit entry"
              },
              "correction": {
                "code": "C01",
                "reason": "Incorrect bank account number",
                "description": "Bank account number incorrect or formatted incorrectly"
              }
            },
            "achDetails": {
              "status": "initiated",
              "traceNumber": "124782618117",
              "return": {
                "code": "R01",
                "reason": "Insufficient Funds",
                "description": "Available balance is not sufficient to cover the dollar value of the debit entry"
              },
              "correction": {
                "code": "C01",
                "reason": "Incorrect bank account number",
                "description": "Bank account number incorrect or formatted incorrectly"
              }
            },
            "account": {
              "accountID": "3dfff852-927d-47e8-822c-2fffc57ff6b9",
              "email": "amanda@classbooker.dev",
              "displayName": "Whole Body Fitness"
            },
            "cardDetails": {
              "transactionSource": "recurring",
              "status": "initiated"
            }
          },
          "destination": {
            "paymentMethodID": "8485a2ce-c9b0-4d49-bfa1-60e88a79ce31",
            "paymentMethodType": "moov-wallet",
            "wallet": {
              "walletID": "5f8549fb-eb23-4879-b8dd-138f848e8cd5"
            },
            "account": {
              "accountID": "7c99ddb3-a4f1-4474-97b7-6d8fa07baa07",
              "email": "jules.jackson@example.com",
              "displayName": "Jules Jackson"
            }
          },
          "amount": {
            "currency": "USD",
            "value": 1204
          },
          "description": "Pay Instructor for May 15 Class",
          "metadata": {
            "property1": "string",
            "property2": "string"
          }
        }
      }
    }
  }
}
